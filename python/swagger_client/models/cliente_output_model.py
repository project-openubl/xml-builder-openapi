# coding: utf-8

"""
    XML Builder API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0.Final
    Contact: projectopenubl+subscribe@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ClienteOutputModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contacto': 'ContactoOutputModel',
        'direccion': 'DireccionOutputModel',
        'nombre': 'str',
        'numero_documento_identidad': 'str',
        'tipo_documento_identidad': 'Object'
    }

    attribute_map = {
        'contacto': 'contacto',
        'direccion': 'direccion',
        'nombre': 'nombre',
        'numero_documento_identidad': 'numeroDocumentoIdentidad',
        'tipo_documento_identidad': 'tipoDocumentoIdentidad'
    }

    def __init__(self, contacto=None, direccion=None, nombre=None, numero_documento_identidad=None, tipo_documento_identidad=None):  # noqa: E501
        """ClienteOutputModel - a model defined in Swagger"""  # noqa: E501
        self._contacto = None
        self._direccion = None
        self._nombre = None
        self._numero_documento_identidad = None
        self._tipo_documento_identidad = None
        self.discriminator = None
        if contacto is not None:
            self.contacto = contacto
        if direccion is not None:
            self.direccion = direccion
        if nombre is not None:
            self.nombre = nombre
        if numero_documento_identidad is not None:
            self.numero_documento_identidad = numero_documento_identidad
        self.tipo_documento_identidad = tipo_documento_identidad

    @property
    def contacto(self):
        """Gets the contacto of this ClienteOutputModel.  # noqa: E501


        :return: The contacto of this ClienteOutputModel.  # noqa: E501
        :rtype: ContactoOutputModel
        """
        return self._contacto

    @contacto.setter
    def contacto(self, contacto):
        """Sets the contacto of this ClienteOutputModel.


        :param contacto: The contacto of this ClienteOutputModel.  # noqa: E501
        :type: ContactoOutputModel
        """

        self._contacto = contacto

    @property
    def direccion(self):
        """Gets the direccion of this ClienteOutputModel.  # noqa: E501


        :return: The direccion of this ClienteOutputModel.  # noqa: E501
        :rtype: DireccionOutputModel
        """
        return self._direccion

    @direccion.setter
    def direccion(self, direccion):
        """Sets the direccion of this ClienteOutputModel.


        :param direccion: The direccion of this ClienteOutputModel.  # noqa: E501
        :type: DireccionOutputModel
        """

        self._direccion = direccion

    @property
    def nombre(self):
        """Gets the nombre of this ClienteOutputModel.  # noqa: E501


        :return: The nombre of this ClienteOutputModel.  # noqa: E501
        :rtype: str
        """
        return self._nombre

    @nombre.setter
    def nombre(self, nombre):
        """Sets the nombre of this ClienteOutputModel.


        :param nombre: The nombre of this ClienteOutputModel.  # noqa: E501
        :type: str
        """

        self._nombre = nombre

    @property
    def numero_documento_identidad(self):
        """Gets the numero_documento_identidad of this ClienteOutputModel.  # noqa: E501


        :return: The numero_documento_identidad of this ClienteOutputModel.  # noqa: E501
        :rtype: str
        """
        return self._numero_documento_identidad

    @numero_documento_identidad.setter
    def numero_documento_identidad(self, numero_documento_identidad):
        """Sets the numero_documento_identidad of this ClienteOutputModel.


        :param numero_documento_identidad: The numero_documento_identidad of this ClienteOutputModel.  # noqa: E501
        :type: str
        """

        self._numero_documento_identidad = numero_documento_identidad

    @property
    def tipo_documento_identidad(self):
        """Gets the tipo_documento_identidad of this ClienteOutputModel.  # noqa: E501


        :return: The tipo_documento_identidad of this ClienteOutputModel.  # noqa: E501
        :rtype: Object
        """
        return self._tipo_documento_identidad

    @tipo_documento_identidad.setter
    def tipo_documento_identidad(self, tipo_documento_identidad):
        """Sets the tipo_documento_identidad of this ClienteOutputModel.


        :param tipo_documento_identidad: The tipo_documento_identidad of this ClienteOutputModel.  # noqa: E501
        :type: Object
        """
        if tipo_documento_identidad is None:
            raise ValueError("Invalid value for `tipo_documento_identidad`, must not be `None`")  # noqa: E501

        self._tipo_documento_identidad = tipo_documento_identidad

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClienteOutputModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClienteOutputModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
