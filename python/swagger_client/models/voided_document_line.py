# coding: utf-8

"""
    XML Builder API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0.Final
    Contact: projectopenubl+subscribe@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class VoidedDocumentLine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fecha_emision': 'int',
        'serie_numero': 'str',
        'tipo_comprobante': 'str'
    }

    attribute_map = {
        'fecha_emision': 'fechaEmision',
        'serie_numero': 'serieNumero',
        'tipo_comprobante': 'tipoComprobante'
    }

    def __init__(self, fecha_emision=None, serie_numero=None, tipo_comprobante=None):  # noqa: E501
        """VoidedDocumentLine - a model defined in Swagger"""  # noqa: E501
        self._fecha_emision = None
        self._serie_numero = None
        self._tipo_comprobante = None
        self.discriminator = None
        self.fecha_emision = fecha_emision
        if serie_numero is not None:
            self.serie_numero = serie_numero
        if tipo_comprobante is not None:
            self.tipo_comprobante = tipo_comprobante

    @property
    def fecha_emision(self):
        """Gets the fecha_emision of this VoidedDocumentLine.  # noqa: E501

        Fecha en la que se emitió el comprobante a dar de baja. Fecha expresada en milliseconds  # noqa: E501

        :return: The fecha_emision of this VoidedDocumentLine.  # noqa: E501
        :rtype: int
        """
        return self._fecha_emision

    @fecha_emision.setter
    def fecha_emision(self, fecha_emision):
        """Sets the fecha_emision of this VoidedDocumentLine.

        Fecha en la que se emitió el comprobante a dar de baja. Fecha expresada en milliseconds  # noqa: E501

        :param fecha_emision: The fecha_emision of this VoidedDocumentLine.  # noqa: E501
        :type: int
        """
        if fecha_emision is None:
            raise ValueError("Invalid value for `fecha_emision`, must not be `None`")  # noqa: E501

        self._fecha_emision = fecha_emision

    @property
    def serie_numero(self):
        """Gets the serie_numero of this VoidedDocumentLine.  # noqa: E501

        Serie y número del comprobante a dar de baja  # noqa: E501

        :return: The serie_numero of this VoidedDocumentLine.  # noqa: E501
        :rtype: str
        """
        return self._serie_numero

    @serie_numero.setter
    def serie_numero(self, serie_numero):
        """Sets the serie_numero of this VoidedDocumentLine.

        Serie y número del comprobante a dar de baja  # noqa: E501

        :param serie_numero: The serie_numero of this VoidedDocumentLine.  # noqa: E501
        :type: str
        """

        self._serie_numero = serie_numero

    @property
    def tipo_comprobante(self):
        """Gets the tipo_comprobante of this VoidedDocumentLine.  # noqa: E501

        Catalogo 01  # noqa: E501

        :return: The tipo_comprobante of this VoidedDocumentLine.  # noqa: E501
        :rtype: str
        """
        return self._tipo_comprobante

    @tipo_comprobante.setter
    def tipo_comprobante(self, tipo_comprobante):
        """Sets the tipo_comprobante of this VoidedDocumentLine.

        Catalogo 01  # noqa: E501

        :param tipo_comprobante: The tipo_comprobante of this VoidedDocumentLine.  # noqa: E501
        :type: str
        """

        self._tipo_comprobante = tipo_comprobante

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VoidedDocumentLine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VoidedDocumentLine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
