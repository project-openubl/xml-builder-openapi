# coding: utf-8

"""
    XML Builder API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0.Final
    Contact: projectopenubl+subscribe@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DocumentLine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cantidad': 'Object',
        'descripcion': 'str',
        'icb': 'bool',
        'precio_con_igv': 'Object',
        'precio_unitario': 'Object',
        'tipo_igv': 'str',
        'unidad_medida': 'str'
    }

    attribute_map = {
        'cantidad': 'cantidad',
        'descripcion': 'descripcion',
        'icb': 'icb',
        'precio_con_igv': 'precioConIgv',
        'precio_unitario': 'precioUnitario',
        'tipo_igv': 'tipoIgv',
        'unidad_medida': 'unidadMedida'
    }

    def __init__(self, cantidad=None, descripcion=None, icb=None, precio_con_igv=None, precio_unitario=None, tipo_igv=None, unidad_medida=None):  # noqa: E501
        """DocumentLine - a model defined in Swagger"""  # noqa: E501
        self._cantidad = None
        self._descripcion = None
        self._icb = None
        self._precio_con_igv = None
        self._precio_unitario = None
        self._tipo_igv = None
        self._unidad_medida = None
        self.discriminator = None
        self.cantidad = cantidad
        self.descripcion = descripcion
        if icb is not None:
            self.icb = icb
        if precio_con_igv is not None:
            self.precio_con_igv = precio_con_igv
        if precio_unitario is not None:
            self.precio_unitario = precio_unitario
        if tipo_igv is not None:
            self.tipo_igv = tipo_igv
        if unidad_medida is not None:
            self.unidad_medida = unidad_medida

    @property
    def cantidad(self):
        """Gets the cantidad of this DocumentLine.  # noqa: E501


        :return: The cantidad of this DocumentLine.  # noqa: E501
        :rtype: Object
        """
        return self._cantidad

    @cantidad.setter
    def cantidad(self, cantidad):
        """Sets the cantidad of this DocumentLine.


        :param cantidad: The cantidad of this DocumentLine.  # noqa: E501
        :type: Object
        """
        if cantidad is None:
            raise ValueError("Invalid value for `cantidad`, must not be `None`")  # noqa: E501

        self._cantidad = cantidad

    @property
    def descripcion(self):
        """Gets the descripcion of this DocumentLine.  # noqa: E501

        Descripci칩n del producto/servicio  # noqa: E501

        :return: The descripcion of this DocumentLine.  # noqa: E501
        :rtype: str
        """
        return self._descripcion

    @descripcion.setter
    def descripcion(self, descripcion):
        """Sets the descripcion of this DocumentLine.

        Descripci칩n del producto/servicio  # noqa: E501

        :param descripcion: The descripcion of this DocumentLine.  # noqa: E501
        :type: str
        """
        if descripcion is None:
            raise ValueError("Invalid value for `descripcion`, must not be `None`")  # noqa: E501

        self._descripcion = descripcion

    @property
    def icb(self):
        """Gets the icb of this DocumentLine.  # noqa: E501

        True si el producto est치 afecto al impuesto ICB_PE  # noqa: E501

        :return: The icb of this DocumentLine.  # noqa: E501
        :rtype: bool
        """
        return self._icb

    @icb.setter
    def icb(self, icb):
        """Sets the icb of this DocumentLine.

        True si el producto est치 afecto al impuesto ICB_PE  # noqa: E501

        :param icb: The icb of this DocumentLine.  # noqa: E501
        :type: bool
        """

        self._icb = icb

    @property
    def precio_con_igv(self):
        """Gets the precio_con_igv of this DocumentLine.  # noqa: E501


        :return: The precio_con_igv of this DocumentLine.  # noqa: E501
        :rtype: Object
        """
        return self._precio_con_igv

    @precio_con_igv.setter
    def precio_con_igv(self, precio_con_igv):
        """Sets the precio_con_igv of this DocumentLine.


        :param precio_con_igv: The precio_con_igv of this DocumentLine.  # noqa: E501
        :type: Object
        """

        self._precio_con_igv = precio_con_igv

    @property
    def precio_unitario(self):
        """Gets the precio_unitario of this DocumentLine.  # noqa: E501


        :return: The precio_unitario of this DocumentLine.  # noqa: E501
        :rtype: Object
        """
        return self._precio_unitario

    @precio_unitario.setter
    def precio_unitario(self, precio_unitario):
        """Sets the precio_unitario of this DocumentLine.


        :param precio_unitario: The precio_unitario of this DocumentLine.  # noqa: E501
        :type: Object
        """

        self._precio_unitario = precio_unitario

    @property
    def tipo_igv(self):
        """Gets the tipo_igv of this DocumentLine.  # noqa: E501

        Catalogo 07  # noqa: E501

        :return: The tipo_igv of this DocumentLine.  # noqa: E501
        :rtype: str
        """
        return self._tipo_igv

    @tipo_igv.setter
    def tipo_igv(self, tipo_igv):
        """Sets the tipo_igv of this DocumentLine.

        Catalogo 07  # noqa: E501

        :param tipo_igv: The tipo_igv of this DocumentLine.  # noqa: E501
        :type: str
        """
        allowed_values = ["GRAVADO_OPERACION_ONEROSA", "10", "GRAVADO_RETIRO_POR_PREMIO", "11", "GRAVADO_RETIRO_POR_DONACION", "12", "GRAVADO_RETIRO", "13", "GRAVADO_RETIRO_POR_PUBLICIDAD", "14", "GRAVADO_BONIFICACIONES", "15", "GRAVADO_RETIRO_POR_ENTREGA_A_TRABAJADORES", "16", "GRAVADO_IVAP", "17", "EXONERADO_OPERACION_ONEROSA", "20", "EXONERADO_TRANSFERENCIA_GRATUITA", "21", "INAFECTO_OPERACION_ONEROSA", "30", "INAFECTO_RETIRO_POR_BONIFICACION", "31", "INAFECTO_RETIRO", "32", "INAFECTO_RETIRO_POR_MUESTRAS_MEDICAS", "33", "INAFECTO_RETIRO_POR_CONVENIO_COLECTIVO", "34", "INAFECTO_RETIRO_POR_PREMIO", "35", "INAFECTO_RETIRO_POR_PUBLICIDAD", "36", "EXPORTACION", "40"]  # noqa: E501
        if tipo_igv not in allowed_values:
            raise ValueError(
                "Invalid value for `tipo_igv` ({0}), must be one of {1}"  # noqa: E501
                .format(tipo_igv, allowed_values)
            )

        self._tipo_igv = tipo_igv

    @property
    def unidad_medida(self):
        """Gets the unidad_medida of this DocumentLine.  # noqa: E501


        :return: The unidad_medida of this DocumentLine.  # noqa: E501
        :rtype: str
        """
        return self._unidad_medida

    @unidad_medida.setter
    def unidad_medida(self, unidad_medida):
        """Sets the unidad_medida of this DocumentLine.


        :param unidad_medida: The unidad_medida of this DocumentLine.  # noqa: E501
        :type: str
        """

        self._unidad_medida = unidad_medida

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentLine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentLine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
