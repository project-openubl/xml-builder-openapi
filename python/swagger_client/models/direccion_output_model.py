# coding: utf-8

"""
    XML Builder API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0.Final
    Contact: projectopenubl+subscribe@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DireccionOutputModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'codigo_local': 'str',
        'codigo_pais': 'str',
        'departamento': 'str',
        'direccion': 'str',
        'distrito': 'str',
        'provincia': 'str',
        'ubigeo': 'str',
        'urbanizacion': 'str'
    }

    attribute_map = {
        'codigo_local': 'codigoLocal',
        'codigo_pais': 'codigoPais',
        'departamento': 'departamento',
        'direccion': 'direccion',
        'distrito': 'distrito',
        'provincia': 'provincia',
        'ubigeo': 'ubigeo',
        'urbanizacion': 'urbanizacion'
    }

    def __init__(self, codigo_local=None, codigo_pais=None, departamento=None, direccion=None, distrito=None, provincia=None, ubigeo=None, urbanizacion=None):  # noqa: E501
        """DireccionOutputModel - a model defined in Swagger"""  # noqa: E501
        self._codigo_local = None
        self._codigo_pais = None
        self._departamento = None
        self._direccion = None
        self._distrito = None
        self._provincia = None
        self._ubigeo = None
        self._urbanizacion = None
        self.discriminator = None
        if codigo_local is not None:
            self.codigo_local = codigo_local
        if codigo_pais is not None:
            self.codigo_pais = codigo_pais
        if departamento is not None:
            self.departamento = departamento
        if direccion is not None:
            self.direccion = direccion
        if distrito is not None:
            self.distrito = distrito
        if provincia is not None:
            self.provincia = provincia
        if ubigeo is not None:
            self.ubigeo = ubigeo
        if urbanizacion is not None:
            self.urbanizacion = urbanizacion

    @property
    def codigo_local(self):
        """Gets the codigo_local of this DireccionOutputModel.  # noqa: E501


        :return: The codigo_local of this DireccionOutputModel.  # noqa: E501
        :rtype: str
        """
        return self._codigo_local

    @codigo_local.setter
    def codigo_local(self, codigo_local):
        """Sets the codigo_local of this DireccionOutputModel.


        :param codigo_local: The codigo_local of this DireccionOutputModel.  # noqa: E501
        :type: str
        """

        self._codigo_local = codigo_local

    @property
    def codigo_pais(self):
        """Gets the codigo_pais of this DireccionOutputModel.  # noqa: E501


        :return: The codigo_pais of this DireccionOutputModel.  # noqa: E501
        :rtype: str
        """
        return self._codigo_pais

    @codigo_pais.setter
    def codigo_pais(self, codigo_pais):
        """Sets the codigo_pais of this DireccionOutputModel.


        :param codigo_pais: The codigo_pais of this DireccionOutputModel.  # noqa: E501
        :type: str
        """

        self._codigo_pais = codigo_pais

    @property
    def departamento(self):
        """Gets the departamento of this DireccionOutputModel.  # noqa: E501


        :return: The departamento of this DireccionOutputModel.  # noqa: E501
        :rtype: str
        """
        return self._departamento

    @departamento.setter
    def departamento(self, departamento):
        """Sets the departamento of this DireccionOutputModel.


        :param departamento: The departamento of this DireccionOutputModel.  # noqa: E501
        :type: str
        """

        self._departamento = departamento

    @property
    def direccion(self):
        """Gets the direccion of this DireccionOutputModel.  # noqa: E501


        :return: The direccion of this DireccionOutputModel.  # noqa: E501
        :rtype: str
        """
        return self._direccion

    @direccion.setter
    def direccion(self, direccion):
        """Sets the direccion of this DireccionOutputModel.


        :param direccion: The direccion of this DireccionOutputModel.  # noqa: E501
        :type: str
        """

        self._direccion = direccion

    @property
    def distrito(self):
        """Gets the distrito of this DireccionOutputModel.  # noqa: E501


        :return: The distrito of this DireccionOutputModel.  # noqa: E501
        :rtype: str
        """
        return self._distrito

    @distrito.setter
    def distrito(self, distrito):
        """Sets the distrito of this DireccionOutputModel.


        :param distrito: The distrito of this DireccionOutputModel.  # noqa: E501
        :type: str
        """

        self._distrito = distrito

    @property
    def provincia(self):
        """Gets the provincia of this DireccionOutputModel.  # noqa: E501


        :return: The provincia of this DireccionOutputModel.  # noqa: E501
        :rtype: str
        """
        return self._provincia

    @provincia.setter
    def provincia(self, provincia):
        """Sets the provincia of this DireccionOutputModel.


        :param provincia: The provincia of this DireccionOutputModel.  # noqa: E501
        :type: str
        """

        self._provincia = provincia

    @property
    def ubigeo(self):
        """Gets the ubigeo of this DireccionOutputModel.  # noqa: E501


        :return: The ubigeo of this DireccionOutputModel.  # noqa: E501
        :rtype: str
        """
        return self._ubigeo

    @ubigeo.setter
    def ubigeo(self, ubigeo):
        """Sets the ubigeo of this DireccionOutputModel.


        :param ubigeo: The ubigeo of this DireccionOutputModel.  # noqa: E501
        :type: str
        """

        self._ubigeo = ubigeo

    @property
    def urbanizacion(self):
        """Gets the urbanizacion of this DireccionOutputModel.  # noqa: E501


        :return: The urbanizacion of this DireccionOutputModel.  # noqa: E501
        :rtype: str
        """
        return self._urbanizacion

    @urbanizacion.setter
    def urbanizacion(self, urbanizacion):
        """Sets the urbanizacion of this DireccionOutputModel.


        :param urbanizacion: The urbanizacion of this DireccionOutputModel.  # noqa: E501
        :type: str
        """

        self._urbanizacion = urbanizacion

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DireccionOutputModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DireccionOutputModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
