# coding: utf-8

"""
    XML Builder API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0.Final
    Contact: projectopenubl+subscribe@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ImpuestoDetalladoICBOutputModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'categoria': 'Object',
        'importe': 'Object',
        'icb_valor': 'Object'
    }

    attribute_map = {
        'categoria': 'categoria',
        'importe': 'importe',
        'icb_valor': 'icbValor'
    }

    def __init__(self, categoria=None, importe=None, icb_valor=None):  # noqa: E501
        """ImpuestoDetalladoICBOutputModel - a model defined in Swagger"""  # noqa: E501
        self._categoria = None
        self._importe = None
        self._icb_valor = None
        self.discriminator = None
        self.categoria = categoria
        self.importe = importe
        self.icb_valor = icb_valor

    @property
    def categoria(self):
        """Gets the categoria of this ImpuestoDetalladoICBOutputModel.  # noqa: E501


        :return: The categoria of this ImpuestoDetalladoICBOutputModel.  # noqa: E501
        :rtype: Object
        """
        return self._categoria

    @categoria.setter
    def categoria(self, categoria):
        """Sets the categoria of this ImpuestoDetalladoICBOutputModel.


        :param categoria: The categoria of this ImpuestoDetalladoICBOutputModel.  # noqa: E501
        :type: Object
        """
        if categoria is None:
            raise ValueError("Invalid value for `categoria`, must not be `None`")  # noqa: E501

        self._categoria = categoria

    @property
    def importe(self):
        """Gets the importe of this ImpuestoDetalladoICBOutputModel.  # noqa: E501


        :return: The importe of this ImpuestoDetalladoICBOutputModel.  # noqa: E501
        :rtype: Object
        """
        return self._importe

    @importe.setter
    def importe(self, importe):
        """Sets the importe of this ImpuestoDetalladoICBOutputModel.


        :param importe: The importe of this ImpuestoDetalladoICBOutputModel.  # noqa: E501
        :type: Object
        """
        if importe is None:
            raise ValueError("Invalid value for `importe`, must not be `None`")  # noqa: E501

        self._importe = importe

    @property
    def icb_valor(self):
        """Gets the icb_valor of this ImpuestoDetalladoICBOutputModel.  # noqa: E501


        :return: The icb_valor of this ImpuestoDetalladoICBOutputModel.  # noqa: E501
        :rtype: Object
        """
        return self._icb_valor

    @icb_valor.setter
    def icb_valor(self, icb_valor):
        """Sets the icb_valor of this ImpuestoDetalladoICBOutputModel.


        :param icb_valor: The icb_valor of this ImpuestoDetalladoICBOutputModel.  # noqa: E501
        :type: Object
        """
        if icb_valor is None:
            raise ValueError("Invalid value for `icb_valor`, must not be `None`")  # noqa: E501

        self._icb_valor = icb_valor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImpuestoDetalladoICBOutputModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImpuestoDetalladoICBOutputModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
