# coding: utf-8

"""
    XML Builder API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0.Final
    Contact: projectopenubl+subscribe@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SummaryDocumentLine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comprobante': 'Object',
        'comprobante_afectado': 'Object',
        'tipo_operacion': 'str'
    }

    attribute_map = {
        'comprobante': 'comprobante',
        'comprobante_afectado': 'comprobanteAfectado',
        'tipo_operacion': 'tipoOperacion'
    }

    def __init__(self, comprobante=None, comprobante_afectado=None, tipo_operacion=None):  # noqa: E501
        """SummaryDocumentLine - a model defined in Swagger"""  # noqa: E501
        self._comprobante = None
        self._comprobante_afectado = None
        self._tipo_operacion = None
        self.discriminator = None
        self.comprobante = comprobante
        if comprobante_afectado is not None:
            self.comprobante_afectado = comprobante_afectado
        self.tipo_operacion = tipo_operacion

    @property
    def comprobante(self):
        """Gets the comprobante of this SummaryDocumentLine.  # noqa: E501


        :return: The comprobante of this SummaryDocumentLine.  # noqa: E501
        :rtype: Object
        """
        return self._comprobante

    @comprobante.setter
    def comprobante(self, comprobante):
        """Sets the comprobante of this SummaryDocumentLine.


        :param comprobante: The comprobante of this SummaryDocumentLine.  # noqa: E501
        :type: Object
        """
        if comprobante is None:
            raise ValueError("Invalid value for `comprobante`, must not be `None`")  # noqa: E501

        self._comprobante = comprobante

    @property
    def comprobante_afectado(self):
        """Gets the comprobante_afectado of this SummaryDocumentLine.  # noqa: E501


        :return: The comprobante_afectado of this SummaryDocumentLine.  # noqa: E501
        :rtype: Object
        """
        return self._comprobante_afectado

    @comprobante_afectado.setter
    def comprobante_afectado(self, comprobante_afectado):
        """Sets the comprobante_afectado of this SummaryDocumentLine.


        :param comprobante_afectado: The comprobante_afectado of this SummaryDocumentLine.  # noqa: E501
        :type: Object
        """

        self._comprobante_afectado = comprobante_afectado

    @property
    def tipo_operacion(self):
        """Gets the tipo_operacion of this SummaryDocumentLine.  # noqa: E501

        Catalogo 19  # noqa: E501

        :return: The tipo_operacion of this SummaryDocumentLine.  # noqa: E501
        :rtype: str
        """
        return self._tipo_operacion

    @tipo_operacion.setter
    def tipo_operacion(self, tipo_operacion):
        """Sets the tipo_operacion of this SummaryDocumentLine.

        Catalogo 19  # noqa: E501

        :param tipo_operacion: The tipo_operacion of this SummaryDocumentLine.  # noqa: E501
        :type: str
        """
        if tipo_operacion is None:
            raise ValueError("Invalid value for `tipo_operacion`, must not be `None`")  # noqa: E501
        allowed_values = ["ADICIONAR", "1", "MODIFICAR", "2", "ANULADO", "3"]  # noqa: E501
        if tipo_operacion not in allowed_values:
            raise ValueError(
                "Invalid value for `tipo_operacion` ({0}), must be one of {1}"  # noqa: E501
                .format(tipo_operacion, allowed_values)
            )

        self._tipo_operacion = tipo_operacion

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SummaryDocumentLine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SummaryDocumentLine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
