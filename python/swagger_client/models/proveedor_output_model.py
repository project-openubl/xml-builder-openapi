# coding: utf-8

"""
    XML Builder API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0.Final
    Contact: projectopenubl+subscribe@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ProveedorOutputModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contacto': 'ContactoOutputModel',
        'direccion': 'DireccionOutputModel',
        'nombre_comercial': 'str',
        'razon_social': 'str',
        'ruc': 'str'
    }

    attribute_map = {
        'contacto': 'contacto',
        'direccion': 'direccion',
        'nombre_comercial': 'nombreComercial',
        'razon_social': 'razonSocial',
        'ruc': 'ruc'
    }

    def __init__(self, contacto=None, direccion=None, nombre_comercial=None, razon_social=None, ruc=None):  # noqa: E501
        """ProveedorOutputModel - a model defined in Swagger"""  # noqa: E501
        self._contacto = None
        self._direccion = None
        self._nombre_comercial = None
        self._razon_social = None
        self._ruc = None
        self.discriminator = None
        if contacto is not None:
            self.contacto = contacto
        if direccion is not None:
            self.direccion = direccion
        if nombre_comercial is not None:
            self.nombre_comercial = nombre_comercial
        if razon_social is not None:
            self.razon_social = razon_social
        if ruc is not None:
            self.ruc = ruc

    @property
    def contacto(self):
        """Gets the contacto of this ProveedorOutputModel.  # noqa: E501


        :return: The contacto of this ProveedorOutputModel.  # noqa: E501
        :rtype: ContactoOutputModel
        """
        return self._contacto

    @contacto.setter
    def contacto(self, contacto):
        """Sets the contacto of this ProveedorOutputModel.


        :param contacto: The contacto of this ProveedorOutputModel.  # noqa: E501
        :type: ContactoOutputModel
        """

        self._contacto = contacto

    @property
    def direccion(self):
        """Gets the direccion of this ProveedorOutputModel.  # noqa: E501


        :return: The direccion of this ProveedorOutputModel.  # noqa: E501
        :rtype: DireccionOutputModel
        """
        return self._direccion

    @direccion.setter
    def direccion(self, direccion):
        """Sets the direccion of this ProveedorOutputModel.


        :param direccion: The direccion of this ProveedorOutputModel.  # noqa: E501
        :type: DireccionOutputModel
        """

        self._direccion = direccion

    @property
    def nombre_comercial(self):
        """Gets the nombre_comercial of this ProveedorOutputModel.  # noqa: E501


        :return: The nombre_comercial of this ProveedorOutputModel.  # noqa: E501
        :rtype: str
        """
        return self._nombre_comercial

    @nombre_comercial.setter
    def nombre_comercial(self, nombre_comercial):
        """Sets the nombre_comercial of this ProveedorOutputModel.


        :param nombre_comercial: The nombre_comercial of this ProveedorOutputModel.  # noqa: E501
        :type: str
        """

        self._nombre_comercial = nombre_comercial

    @property
    def razon_social(self):
        """Gets the razon_social of this ProveedorOutputModel.  # noqa: E501


        :return: The razon_social of this ProveedorOutputModel.  # noqa: E501
        :rtype: str
        """
        return self._razon_social

    @razon_social.setter
    def razon_social(self, razon_social):
        """Sets the razon_social of this ProveedorOutputModel.


        :param razon_social: The razon_social of this ProveedorOutputModel.  # noqa: E501
        :type: str
        """

        self._razon_social = razon_social

    @property
    def ruc(self):
        """Gets the ruc of this ProveedorOutputModel.  # noqa: E501


        :return: The ruc of this ProveedorOutputModel.  # noqa: E501
        :rtype: str
        """
        return self._ruc

    @ruc.setter
    def ruc(self, ruc):
        """Sets the ruc of this ProveedorOutputModel.


        :param ruc: The ruc of this ProveedorOutputModel.  # noqa: E501
        :type: str
        """

        self._ruc = ruc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProveedorOutputModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProveedorOutputModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
