# coding: utf-8

"""
    XML Builder API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0.Final
    Contact: projectopenubl+subscribe@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SummaryDocumentLineComprobanteValorVenta(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exonerado': 'Object',
        'gratuito': 'Object',
        'gravado': 'Object',
        'importe_total': 'Object',
        'inafecto': 'Object',
        'otros_cargos': 'Object'
    }

    attribute_map = {
        'exonerado': 'exonerado',
        'gratuito': 'gratuito',
        'gravado': 'gravado',
        'importe_total': 'importeTotal',
        'inafecto': 'inafecto',
        'otros_cargos': 'otrosCargos'
    }

    def __init__(self, exonerado=None, gratuito=None, gravado=None, importe_total=None, inafecto=None, otros_cargos=None):  # noqa: E501
        """SummaryDocumentLineComprobanteValorVenta - a model defined in Swagger"""  # noqa: E501
        self._exonerado = None
        self._gratuito = None
        self._gravado = None
        self._importe_total = None
        self._inafecto = None
        self._otros_cargos = None
        self.discriminator = None
        if exonerado is not None:
            self.exonerado = exonerado
        if gratuito is not None:
            self.gratuito = gratuito
        if gravado is not None:
            self.gravado = gravado
        self.importe_total = importe_total
        if inafecto is not None:
            self.inafecto = inafecto
        if otros_cargos is not None:
            self.otros_cargos = otros_cargos

    @property
    def exonerado(self):
        """Gets the exonerado of this SummaryDocumentLineComprobanteValorVenta.  # noqa: E501


        :return: The exonerado of this SummaryDocumentLineComprobanteValorVenta.  # noqa: E501
        :rtype: Object
        """
        return self._exonerado

    @exonerado.setter
    def exonerado(self, exonerado):
        """Sets the exonerado of this SummaryDocumentLineComprobanteValorVenta.


        :param exonerado: The exonerado of this SummaryDocumentLineComprobanteValorVenta.  # noqa: E501
        :type: Object
        """

        self._exonerado = exonerado

    @property
    def gratuito(self):
        """Gets the gratuito of this SummaryDocumentLineComprobanteValorVenta.  # noqa: E501


        :return: The gratuito of this SummaryDocumentLineComprobanteValorVenta.  # noqa: E501
        :rtype: Object
        """
        return self._gratuito

    @gratuito.setter
    def gratuito(self, gratuito):
        """Sets the gratuito of this SummaryDocumentLineComprobanteValorVenta.


        :param gratuito: The gratuito of this SummaryDocumentLineComprobanteValorVenta.  # noqa: E501
        :type: Object
        """

        self._gratuito = gratuito

    @property
    def gravado(self):
        """Gets the gravado of this SummaryDocumentLineComprobanteValorVenta.  # noqa: E501


        :return: The gravado of this SummaryDocumentLineComprobanteValorVenta.  # noqa: E501
        :rtype: Object
        """
        return self._gravado

    @gravado.setter
    def gravado(self, gravado):
        """Sets the gravado of this SummaryDocumentLineComprobanteValorVenta.


        :param gravado: The gravado of this SummaryDocumentLineComprobanteValorVenta.  # noqa: E501
        :type: Object
        """

        self._gravado = gravado

    @property
    def importe_total(self):
        """Gets the importe_total of this SummaryDocumentLineComprobanteValorVenta.  # noqa: E501


        :return: The importe_total of this SummaryDocumentLineComprobanteValorVenta.  # noqa: E501
        :rtype: Object
        """
        return self._importe_total

    @importe_total.setter
    def importe_total(self, importe_total):
        """Sets the importe_total of this SummaryDocumentLineComprobanteValorVenta.


        :param importe_total: The importe_total of this SummaryDocumentLineComprobanteValorVenta.  # noqa: E501
        :type: Object
        """
        if importe_total is None:
            raise ValueError("Invalid value for `importe_total`, must not be `None`")  # noqa: E501

        self._importe_total = importe_total

    @property
    def inafecto(self):
        """Gets the inafecto of this SummaryDocumentLineComprobanteValorVenta.  # noqa: E501


        :return: The inafecto of this SummaryDocumentLineComprobanteValorVenta.  # noqa: E501
        :rtype: Object
        """
        return self._inafecto

    @inafecto.setter
    def inafecto(self, inafecto):
        """Sets the inafecto of this SummaryDocumentLineComprobanteValorVenta.


        :param inafecto: The inafecto of this SummaryDocumentLineComprobanteValorVenta.  # noqa: E501
        :type: Object
        """

        self._inafecto = inafecto

    @property
    def otros_cargos(self):
        """Gets the otros_cargos of this SummaryDocumentLineComprobanteValorVenta.  # noqa: E501


        :return: The otros_cargos of this SummaryDocumentLineComprobanteValorVenta.  # noqa: E501
        :rtype: Object
        """
        return self._otros_cargos

    @otros_cargos.setter
    def otros_cargos(self, otros_cargos):
        """Sets the otros_cargos of this SummaryDocumentLineComprobanteValorVenta.


        :param otros_cargos: The otros_cargos of this SummaryDocumentLineComprobanteValorVenta.  # noqa: E501
        :type: Object
        """

        self._otros_cargos = otros_cargos

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SummaryDocumentLineComprobanteValorVenta, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SummaryDocumentLineComprobanteValorVenta):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
