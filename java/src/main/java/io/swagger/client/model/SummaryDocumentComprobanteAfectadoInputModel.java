/*
 * XML Builder API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0.Final
 * Contact: projectopenubl+subscribe@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * SummaryDocumentComprobanteAfectadoInputModel
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-04-03T17:52:28.678Z[GMT]")
public class SummaryDocumentComprobanteAfectadoInputModel {
  @SerializedName("serieNumero")
  private String serieNumero = null;

  /**
   * Catalog 01
   */
  @JsonAdapter(TipoEnum.Adapter.class)
  public enum TipoEnum {
    FACTURA("FACTURA"),
    _01("01"),
    BOLETA("BOLETA"),
    _03("03"),
    NOTA_CREDITO("NOTA_CREDITO"),
    _07("07"),
    NOTA_DEBITO("NOTA_DEBITO"),
    _08("08");

    private String value;

    TipoEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TipoEnum fromValue(String text) {
      for (TipoEnum b : TipoEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TipoEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TipoEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TipoEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TipoEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("tipo")
  private TipoEnum tipo = null;

  public SummaryDocumentComprobanteAfectadoInputModel serieNumero(String serieNumero) {
    this.serieNumero = serieNumero;
    return this;
  }

   /**
   * Serie y número del coprobante afectado por Nota de Crédito/Débito
   * @return serieNumero
  **/
  @Schema(example = "B001-1", required = true, description = "Serie y número del coprobante afectado por Nota de Crédito/Débito")
  public String getSerieNumero() {
    return serieNumero;
  }

  public void setSerieNumero(String serieNumero) {
    this.serieNumero = serieNumero;
  }

  public SummaryDocumentComprobanteAfectadoInputModel tipo(TipoEnum tipo) {
    this.tipo = tipo;
    return this;
  }

   /**
   * Catalog 01
   * @return tipo
  **/
  @Schema(example = "BOLETA", required = true, description = "Catalog 01")
  public TipoEnum getTipo() {
    return tipo;
  }

  public void setTipo(TipoEnum tipo) {
    this.tipo = tipo;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SummaryDocumentComprobanteAfectadoInputModel summaryDocumentComprobanteAfectadoInputModel = (SummaryDocumentComprobanteAfectadoInputModel) o;
    return Objects.equals(this.serieNumero, summaryDocumentComprobanteAfectadoInputModel.serieNumero) &&
        Objects.equals(this.tipo, summaryDocumentComprobanteAfectadoInputModel.tipo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serieNumero, tipo);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SummaryDocumentComprobanteAfectadoInputModel {\n");
    
    sb.append("    serieNumero: ").append(toIndentedString(serieNumero)).append("\n");
    sb.append("    tipo: ").append(toIndentedString(tipo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
