/*
 * XML Builder API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0.Final
 * Contact: projectopenubl+subscribe@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * CreditNote
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-04-02T05:58:18.345Z[GMT]")
public class CreditNote {
  @SerializedName("cliente")
  private Object cliente = null;

  @SerializedName("detalle")
  private Object detalle = null;

  @SerializedName("fechaEmision")
  private Long fechaEmision = null;

  @SerializedName("firmante")
  private Object firmante = null;

  @SerializedName("numero")
  private Integer numero = null;

  @SerializedName("proveedor")
  private Object proveedor = null;

  @SerializedName("serie")
  private String serie = null;

  @SerializedName("descripcionSustentoDeNota")
  private String descripcionSustentoDeNota = null;

  @SerializedName("serieNumeroComprobanteAfectado")
  private String serieNumeroComprobanteAfectado = null;

  /**
   * Catalogo 09
   */
  @JsonAdapter(TipoNotaEnum.Adapter.class)
  public enum TipoNotaEnum {
    ANULACION_DE_LA_OPERACION("ANULACION_DE_LA_OPERACION"),
    _01("01"),
    ANULACION_POR_ERROR_EN_EL_RUC("ANULACION_POR_ERROR_EN_EL_RUC"),
    _02("02"),
    CORRECCION_POR_ERROR_EN_LA_DESCRIPCION("CORRECCION_POR_ERROR_EN_LA_DESCRIPCION"),
    _03("03"),
    DESCUENTO_GLOBAL("DESCUENTO_GLOBAL"),
    _04("04"),
    DESCUENTO_POR_ITEM("DESCUENTO_POR_ITEM"),
    _05("05"),
    DEVOLUCION_TOTAL("DEVOLUCION_TOTAL"),
    _06("06"),
    DEVOLUCION_POR_ITEM("DEVOLUCION_POR_ITEM"),
    _07("07"),
    BONIFICACION("BONIFICACION"),
    _08("08"),
    DISMINUCION_EN_EL_VALOR("DISMINUCION_EN_EL_VALOR"),
    _09("09"),
    OTROS_CONCEPTOS("OTROS_CONCEPTOS"),
    _10("10");

    private String value;

    TipoNotaEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TipoNotaEnum fromValue(String text) {
      for (TipoNotaEnum b : TipoNotaEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TipoNotaEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TipoNotaEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TipoNotaEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TipoNotaEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("tipoNota")
  private TipoNotaEnum tipoNota = null;

  public CreditNote cliente(Object cliente) {
    this.cliente = cliente;
    return this;
  }

   /**
   * Get cliente
   * @return cliente
  **/
  @Schema(required = true, description = "")
  public Object getCliente() {
    return cliente;
  }

  public void setCliente(Object cliente) {
    this.cliente = cliente;
  }

  public CreditNote detalle(Object detalle) {
    this.detalle = detalle;
    return this;
  }

   /**
   * Get detalle
   * @return detalle
  **/
  @Schema(required = true, description = "")
  public Object getDetalle() {
    return detalle;
  }

  public void setDetalle(Object detalle) {
    this.detalle = detalle;
  }

  public CreditNote fechaEmision(Long fechaEmision) {
    this.fechaEmision = fechaEmision;
    return this;
  }

   /**
   * Fecha expresada en milliseconds
   * @return fechaEmision
  **/
  @Schema(example = "1585398109198", description = "Fecha expresada en milliseconds")
  public Long getFechaEmision() {
    return fechaEmision;
  }

  public void setFechaEmision(Long fechaEmision) {
    this.fechaEmision = fechaEmision;
  }

  public CreditNote firmante(Object firmante) {
    this.firmante = firmante;
    return this;
  }

   /**
   * Get firmante
   * @return firmante
  **/
  @Schema(description = "")
  public Object getFirmante() {
    return firmante;
  }

  public void setFirmante(Object firmante) {
    this.firmante = firmante;
  }

  public CreditNote numero(Integer numero) {
    this.numero = numero;
    return this;
  }

   /**
   * Get numero
   * minimum: 1
   * maximum: 99999999
   * @return numero
  **/
  @Schema(example = "1", required = true, description = "")
  public Integer getNumero() {
    return numero;
  }

  public void setNumero(Integer numero) {
    this.numero = numero;
  }

  public CreditNote proveedor(Object proveedor) {
    this.proveedor = proveedor;
    return this;
  }

   /**
   * Get proveedor
   * @return proveedor
  **/
  @Schema(required = true, description = "")
  public Object getProveedor() {
    return proveedor;
  }

  public void setProveedor(Object proveedor) {
    this.proveedor = proveedor;
  }

  public CreditNote serie(String serie) {
    this.serie = serie;
    return this;
  }

   /**
   * Get serie
   * @return serie
  **/
  @Schema(example = "F001", required = true, description = "")
  public String getSerie() {
    return serie;
  }

  public void setSerie(String serie) {
    this.serie = serie;
  }

  public CreditNote descripcionSustentoDeNota(String descripcionSustentoDeNota) {
    this.descripcionSustentoDeNota = descripcionSustentoDeNota;
    return this;
  }

   /**
   * Razón por la que se crea la nota
   * @return descripcionSustentoDeNota
  **/
  @Schema(example = "Nota creada por error", required = true, description = "Razón por la que se crea la nota")
  public String getDescripcionSustentoDeNota() {
    return descripcionSustentoDeNota;
  }

  public void setDescripcionSustentoDeNota(String descripcionSustentoDeNota) {
    this.descripcionSustentoDeNota = descripcionSustentoDeNota;
  }

  public CreditNote serieNumeroComprobanteAfectado(String serieNumeroComprobanteAfectado) {
    this.serieNumeroComprobanteAfectado = serieNumeroComprobanteAfectado;
    return this;
  }

   /**
   * Serie y número del comprobante afectado por la nota
   * @return serieNumeroComprobanteAfectado
  **/
  @Schema(example = "F001-1", required = true, description = "Serie y número del comprobante afectado por la nota")
  public String getSerieNumeroComprobanteAfectado() {
    return serieNumeroComprobanteAfectado;
  }

  public void setSerieNumeroComprobanteAfectado(String serieNumeroComprobanteAfectado) {
    this.serieNumeroComprobanteAfectado = serieNumeroComprobanteAfectado;
  }

  public CreditNote tipoNota(TipoNotaEnum tipoNota) {
    this.tipoNota = tipoNota;
    return this;
  }

   /**
   * Catalogo 09
   * @return tipoNota
  **/
  @Schema(example = "ANULACION_DE_LA_OPERACION", description = "Catalogo 09")
  public TipoNotaEnum getTipoNota() {
    return tipoNota;
  }

  public void setTipoNota(TipoNotaEnum tipoNota) {
    this.tipoNota = tipoNota;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreditNote creditNote = (CreditNote) o;
    return Objects.equals(this.cliente, creditNote.cliente) &&
        Objects.equals(this.detalle, creditNote.detalle) &&
        Objects.equals(this.fechaEmision, creditNote.fechaEmision) &&
        Objects.equals(this.firmante, creditNote.firmante) &&
        Objects.equals(this.numero, creditNote.numero) &&
        Objects.equals(this.proveedor, creditNote.proveedor) &&
        Objects.equals(this.serie, creditNote.serie) &&
        Objects.equals(this.descripcionSustentoDeNota, creditNote.descripcionSustentoDeNota) &&
        Objects.equals(this.serieNumeroComprobanteAfectado, creditNote.serieNumeroComprobanteAfectado) &&
        Objects.equals(this.tipoNota, creditNote.tipoNota);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cliente, detalle, fechaEmision, firmante, numero, proveedor, serie, descripcionSustentoDeNota, serieNumeroComprobanteAfectado, tipoNota);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreditNote {\n");
    
    sb.append("    cliente: ").append(toIndentedString(cliente)).append("\n");
    sb.append("    detalle: ").append(toIndentedString(detalle)).append("\n");
    sb.append("    fechaEmision: ").append(toIndentedString(fechaEmision)).append("\n");
    sb.append("    firmante: ").append(toIndentedString(firmante)).append("\n");
    sb.append("    numero: ").append(toIndentedString(numero)).append("\n");
    sb.append("    proveedor: ").append(toIndentedString(proveedor)).append("\n");
    sb.append("    serie: ").append(toIndentedString(serie)).append("\n");
    sb.append("    descripcionSustentoDeNota: ").append(toIndentedString(descripcionSustentoDeNota)).append("\n");
    sb.append("    serieNumeroComprobanteAfectado: ").append(toIndentedString(serieNumeroComprobanteAfectado)).append("\n");
    sb.append("    tipoNota: ").append(toIndentedString(tipoNota)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
