/*
 * XML Builder API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0.Final
 * Contact: projectopenubl+subscribe@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Contacto;
import io.swagger.client.model.Direccion;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Cliente
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-04-03T17:52:28.678Z[GMT]")
public class Cliente {
  @SerializedName("contacto")
  private Contacto contacto = null;

  @SerializedName("direccion")
  private Direccion direccion = null;

  @SerializedName("nombre")
  private String nombre = null;

  @SerializedName("numeroDocumentoIdentidad")
  private String numeroDocumentoIdentidad = null;

  /**
   * Catalogo 06
   */
  @JsonAdapter(TipoDocumentoIdentidadEnum.Adapter.class)
  public enum TipoDocumentoIdentidadEnum {
    DOC_TRIB_NO_DOM_SIN_RUC("DOC_TRIB_NO_DOM_SIN_RUC"),
    _0("0"),
    DNI("DNI"),
    _1("1"),
    EXTRANJERIA("EXTRANJERIA"),
    _4("4"),
    RUC("RUC"),
    _6("6"),
    PASAPORTE("PASAPORTE"),
    _7("7"),
    DEC_DIPLOMATICA("DEC_DIPLOMATICA"),
    A("A");

    private String value;

    TipoDocumentoIdentidadEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TipoDocumentoIdentidadEnum fromValue(String text) {
      for (TipoDocumentoIdentidadEnum b : TipoDocumentoIdentidadEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TipoDocumentoIdentidadEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TipoDocumentoIdentidadEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TipoDocumentoIdentidadEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TipoDocumentoIdentidadEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("tipoDocumentoIdentidad")
  private TipoDocumentoIdentidadEnum tipoDocumentoIdentidad = null;

  public Cliente contacto(Contacto contacto) {
    this.contacto = contacto;
    return this;
  }

   /**
   * Get contacto
   * @return contacto
  **/
  @Schema(description = "")
  public Contacto getContacto() {
    return contacto;
  }

  public void setContacto(Contacto contacto) {
    this.contacto = contacto;
  }

  public Cliente direccion(Direccion direccion) {
    this.direccion = direccion;
    return this;
  }

   /**
   * Get direccion
   * @return direccion
  **/
  @Schema(description = "")
  public Direccion getDireccion() {
    return direccion;
  }

  public void setDireccion(Direccion direccion) {
    this.direccion = direccion;
  }

  public Cliente nombre(String nombre) {
    this.nombre = nombre;
    return this;
  }

   /**
   * Nombre o Razón Social del cliente
   * @return nombre
  **/
  @Schema(example = "Carlos Feria", required = true, description = "Nombre o Razón Social del cliente")
  public String getNombre() {
    return nombre;
  }

  public void setNombre(String nombre) {
    this.nombre = nombre;
  }

  public Cliente numeroDocumentoIdentidad(String numeroDocumentoIdentidad) {
    this.numeroDocumentoIdentidad = numeroDocumentoIdentidad;
    return this;
  }

   /**
   * Get numeroDocumentoIdentidad
   * @return numeroDocumentoIdentidad
  **/
  @Schema(example = "12345678912", required = true, description = "")
  public String getNumeroDocumentoIdentidad() {
    return numeroDocumentoIdentidad;
  }

  public void setNumeroDocumentoIdentidad(String numeroDocumentoIdentidad) {
    this.numeroDocumentoIdentidad = numeroDocumentoIdentidad;
  }

  public Cliente tipoDocumentoIdentidad(TipoDocumentoIdentidadEnum tipoDocumentoIdentidad) {
    this.tipoDocumentoIdentidad = tipoDocumentoIdentidad;
    return this;
  }

   /**
   * Catalogo 06
   * @return tipoDocumentoIdentidad
  **/
  @Schema(example = "RUC", required = true, description = "Catalogo 06")
  public TipoDocumentoIdentidadEnum getTipoDocumentoIdentidad() {
    return tipoDocumentoIdentidad;
  }

  public void setTipoDocumentoIdentidad(TipoDocumentoIdentidadEnum tipoDocumentoIdentidad) {
    this.tipoDocumentoIdentidad = tipoDocumentoIdentidad;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cliente cliente = (Cliente) o;
    return Objects.equals(this.contacto, cliente.contacto) &&
        Objects.equals(this.direccion, cliente.direccion) &&
        Objects.equals(this.nombre, cliente.nombre) &&
        Objects.equals(this.numeroDocumentoIdentidad, cliente.numeroDocumentoIdentidad) &&
        Objects.equals(this.tipoDocumentoIdentidad, cliente.tipoDocumentoIdentidad);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contacto, direccion, nombre, numeroDocumentoIdentidad, tipoDocumentoIdentidad);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Cliente {\n");
    
    sb.append("    contacto: ").append(toIndentedString(contacto)).append("\n");
    sb.append("    direccion: ").append(toIndentedString(direccion)).append("\n");
    sb.append("    nombre: ").append(toIndentedString(nombre)).append("\n");
    sb.append("    numeroDocumentoIdentidad: ").append(toIndentedString(numeroDocumentoIdentidad)).append("\n");
    sb.append("    tipoDocumentoIdentidad: ").append(toIndentedString(tipoDocumentoIdentidad)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
