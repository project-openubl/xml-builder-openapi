/* 
 * XML Builder API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0.Final
 * Contact: projectopenubl+subscribe@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IEnrichApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Enriches the input
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>CreditNoteOutputModel</returns>
        CreditNoteOutputModel ApiDocumentsCreditNoteEnrichPost (CreditNote body = null);

        /// <summary>
        /// Enriches the input
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CreditNoteOutputModel</returns>
        ApiResponse<CreditNoteOutputModel> ApiDocumentsCreditNoteEnrichPostWithHttpInfo (CreditNote body = null);
        /// <summary>
        /// Enriches the input
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>DebitNoteOutputModel</returns>
        DebitNoteOutputModel ApiDocumentsDebitNoteEnrichPost (DebitNote body = null);

        /// <summary>
        /// Enriches the input
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of DebitNoteOutputModel</returns>
        ApiResponse<DebitNoteOutputModel> ApiDocumentsDebitNoteEnrichPostWithHttpInfo (DebitNote body = null);
        /// <summary>
        /// Enriches the input
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>InvoiceOutputModel</returns>
        InvoiceOutputModel ApiDocumentsInvoiceEnrichPost (Invoice body = null);

        /// <summary>
        /// Enriches the input
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InvoiceOutputModel</returns>
        ApiResponse<InvoiceOutputModel> ApiDocumentsInvoiceEnrichPostWithHttpInfo (Invoice body = null);
        /// <summary>
        /// Enriches the input
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>SummaryDocumentOutputModel</returns>
        SummaryDocumentOutputModel ApiDocumentsSummaryDocumentEnrichPost (SummaryDocument body = null);

        /// <summary>
        /// Enriches the input
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SummaryDocumentOutputModel</returns>
        ApiResponse<SummaryDocumentOutputModel> ApiDocumentsSummaryDocumentEnrichPostWithHttpInfo (SummaryDocument body = null);
        /// <summary>
        /// Enriches the input
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>VoidedDocumentOutputModel</returns>
        VoidedDocumentOutputModel ApiDocumentsVoidedDocumentEnrichPost (VoidedDocument body = null);

        /// <summary>
        /// Enriches the input
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of VoidedDocumentOutputModel</returns>
        ApiResponse<VoidedDocumentOutputModel> ApiDocumentsVoidedDocumentEnrichPostWithHttpInfo (VoidedDocument body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Enriches the input
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CreditNoteOutputModel</returns>
        System.Threading.Tasks.Task<CreditNoteOutputModel> ApiDocumentsCreditNoteEnrichPostAsync (CreditNote body = null);

        /// <summary>
        /// Enriches the input
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CreditNoteOutputModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreditNoteOutputModel>> ApiDocumentsCreditNoteEnrichPostAsyncWithHttpInfo (CreditNote body = null);
        /// <summary>
        /// Enriches the input
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of DebitNoteOutputModel</returns>
        System.Threading.Tasks.Task<DebitNoteOutputModel> ApiDocumentsDebitNoteEnrichPostAsync (DebitNote body = null);

        /// <summary>
        /// Enriches the input
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (DebitNoteOutputModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<DebitNoteOutputModel>> ApiDocumentsDebitNoteEnrichPostAsyncWithHttpInfo (DebitNote body = null);
        /// <summary>
        /// Enriches the input
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InvoiceOutputModel</returns>
        System.Threading.Tasks.Task<InvoiceOutputModel> ApiDocumentsInvoiceEnrichPostAsync (Invoice body = null);

        /// <summary>
        /// Enriches the input
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InvoiceOutputModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvoiceOutputModel>> ApiDocumentsInvoiceEnrichPostAsyncWithHttpInfo (Invoice body = null);
        /// <summary>
        /// Enriches the input
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SummaryDocumentOutputModel</returns>
        System.Threading.Tasks.Task<SummaryDocumentOutputModel> ApiDocumentsSummaryDocumentEnrichPostAsync (SummaryDocument body = null);

        /// <summary>
        /// Enriches the input
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SummaryDocumentOutputModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SummaryDocumentOutputModel>> ApiDocumentsSummaryDocumentEnrichPostAsyncWithHttpInfo (SummaryDocument body = null);
        /// <summary>
        /// Enriches the input
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of VoidedDocumentOutputModel</returns>
        System.Threading.Tasks.Task<VoidedDocumentOutputModel> ApiDocumentsVoidedDocumentEnrichPostAsync (VoidedDocument body = null);

        /// <summary>
        /// Enriches the input
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (VoidedDocumentOutputModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<VoidedDocumentOutputModel>> ApiDocumentsVoidedDocumentEnrichPostAsyncWithHttpInfo (VoidedDocument body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class EnrichApi : IEnrichApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EnrichApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EnrichApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnrichApi"/> class
        /// </summary>
        /// <returns></returns>
        public EnrichApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnrichApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EnrichApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Enriches the input 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>CreditNoteOutputModel</returns>
        public CreditNoteOutputModel ApiDocumentsCreditNoteEnrichPost (CreditNote body = null)
        {
             ApiResponse<CreditNoteOutputModel> localVarResponse = ApiDocumentsCreditNoteEnrichPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Enriches the input 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CreditNoteOutputModel</returns>
        public ApiResponse< CreditNoteOutputModel > ApiDocumentsCreditNoteEnrichPostWithHttpInfo (CreditNote body = null)
        {

            var localVarPath = "/api/documents/credit-note/enrich";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiDocumentsCreditNoteEnrichPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreditNoteOutputModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreditNoteOutputModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreditNoteOutputModel)));
        }

        /// <summary>
        /// Enriches the input 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CreditNoteOutputModel</returns>
        public async System.Threading.Tasks.Task<CreditNoteOutputModel> ApiDocumentsCreditNoteEnrichPostAsync (CreditNote body = null)
        {
             ApiResponse<CreditNoteOutputModel> localVarResponse = await ApiDocumentsCreditNoteEnrichPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Enriches the input 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CreditNoteOutputModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreditNoteOutputModel>> ApiDocumentsCreditNoteEnrichPostAsyncWithHttpInfo (CreditNote body = null)
        {

            var localVarPath = "/api/documents/credit-note/enrich";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiDocumentsCreditNoteEnrichPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreditNoteOutputModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreditNoteOutputModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreditNoteOutputModel)));
        }

        /// <summary>
        /// Enriches the input 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>DebitNoteOutputModel</returns>
        public DebitNoteOutputModel ApiDocumentsDebitNoteEnrichPost (DebitNote body = null)
        {
             ApiResponse<DebitNoteOutputModel> localVarResponse = ApiDocumentsDebitNoteEnrichPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Enriches the input 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of DebitNoteOutputModel</returns>
        public ApiResponse< DebitNoteOutputModel > ApiDocumentsDebitNoteEnrichPostWithHttpInfo (DebitNote body = null)
        {

            var localVarPath = "/api/documents/debit-note/enrich";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiDocumentsDebitNoteEnrichPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DebitNoteOutputModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DebitNoteOutputModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DebitNoteOutputModel)));
        }

        /// <summary>
        /// Enriches the input 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of DebitNoteOutputModel</returns>
        public async System.Threading.Tasks.Task<DebitNoteOutputModel> ApiDocumentsDebitNoteEnrichPostAsync (DebitNote body = null)
        {
             ApiResponse<DebitNoteOutputModel> localVarResponse = await ApiDocumentsDebitNoteEnrichPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Enriches the input 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (DebitNoteOutputModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DebitNoteOutputModel>> ApiDocumentsDebitNoteEnrichPostAsyncWithHttpInfo (DebitNote body = null)
        {

            var localVarPath = "/api/documents/debit-note/enrich";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiDocumentsDebitNoteEnrichPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DebitNoteOutputModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DebitNoteOutputModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DebitNoteOutputModel)));
        }

        /// <summary>
        /// Enriches the input 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>InvoiceOutputModel</returns>
        public InvoiceOutputModel ApiDocumentsInvoiceEnrichPost (Invoice body = null)
        {
             ApiResponse<InvoiceOutputModel> localVarResponse = ApiDocumentsInvoiceEnrichPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Enriches the input 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InvoiceOutputModel</returns>
        public ApiResponse< InvoiceOutputModel > ApiDocumentsInvoiceEnrichPostWithHttpInfo (Invoice body = null)
        {

            var localVarPath = "/api/documents/invoice/enrich";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiDocumentsInvoiceEnrichPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvoiceOutputModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InvoiceOutputModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvoiceOutputModel)));
        }

        /// <summary>
        /// Enriches the input 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InvoiceOutputModel</returns>
        public async System.Threading.Tasks.Task<InvoiceOutputModel> ApiDocumentsInvoiceEnrichPostAsync (Invoice body = null)
        {
             ApiResponse<InvoiceOutputModel> localVarResponse = await ApiDocumentsInvoiceEnrichPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Enriches the input 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InvoiceOutputModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvoiceOutputModel>> ApiDocumentsInvoiceEnrichPostAsyncWithHttpInfo (Invoice body = null)
        {

            var localVarPath = "/api/documents/invoice/enrich";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiDocumentsInvoiceEnrichPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvoiceOutputModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InvoiceOutputModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvoiceOutputModel)));
        }

        /// <summary>
        /// Enriches the input 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>SummaryDocumentOutputModel</returns>
        public SummaryDocumentOutputModel ApiDocumentsSummaryDocumentEnrichPost (SummaryDocument body = null)
        {
             ApiResponse<SummaryDocumentOutputModel> localVarResponse = ApiDocumentsSummaryDocumentEnrichPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Enriches the input 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SummaryDocumentOutputModel</returns>
        public ApiResponse< SummaryDocumentOutputModel > ApiDocumentsSummaryDocumentEnrichPostWithHttpInfo (SummaryDocument body = null)
        {

            var localVarPath = "/api/documents/summary-document/enrich";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiDocumentsSummaryDocumentEnrichPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SummaryDocumentOutputModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SummaryDocumentOutputModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SummaryDocumentOutputModel)));
        }

        /// <summary>
        /// Enriches the input 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SummaryDocumentOutputModel</returns>
        public async System.Threading.Tasks.Task<SummaryDocumentOutputModel> ApiDocumentsSummaryDocumentEnrichPostAsync (SummaryDocument body = null)
        {
             ApiResponse<SummaryDocumentOutputModel> localVarResponse = await ApiDocumentsSummaryDocumentEnrichPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Enriches the input 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SummaryDocumentOutputModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SummaryDocumentOutputModel>> ApiDocumentsSummaryDocumentEnrichPostAsyncWithHttpInfo (SummaryDocument body = null)
        {

            var localVarPath = "/api/documents/summary-document/enrich";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiDocumentsSummaryDocumentEnrichPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SummaryDocumentOutputModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SummaryDocumentOutputModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SummaryDocumentOutputModel)));
        }

        /// <summary>
        /// Enriches the input 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>VoidedDocumentOutputModel</returns>
        public VoidedDocumentOutputModel ApiDocumentsVoidedDocumentEnrichPost (VoidedDocument body = null)
        {
             ApiResponse<VoidedDocumentOutputModel> localVarResponse = ApiDocumentsVoidedDocumentEnrichPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Enriches the input 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of VoidedDocumentOutputModel</returns>
        public ApiResponse< VoidedDocumentOutputModel > ApiDocumentsVoidedDocumentEnrichPostWithHttpInfo (VoidedDocument body = null)
        {

            var localVarPath = "/api/documents/voided-document/enrich";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiDocumentsVoidedDocumentEnrichPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VoidedDocumentOutputModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VoidedDocumentOutputModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VoidedDocumentOutputModel)));
        }

        /// <summary>
        /// Enriches the input 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of VoidedDocumentOutputModel</returns>
        public async System.Threading.Tasks.Task<VoidedDocumentOutputModel> ApiDocumentsVoidedDocumentEnrichPostAsync (VoidedDocument body = null)
        {
             ApiResponse<VoidedDocumentOutputModel> localVarResponse = await ApiDocumentsVoidedDocumentEnrichPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Enriches the input 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (VoidedDocumentOutputModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VoidedDocumentOutputModel>> ApiDocumentsVoidedDocumentEnrichPostAsyncWithHttpInfo (VoidedDocument body = null)
        {

            var localVarPath = "/api/documents/voided-document/enrich";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiDocumentsVoidedDocumentEnrichPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VoidedDocumentOutputModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VoidedDocumentOutputModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VoidedDocumentOutputModel)));
        }

    }
}
