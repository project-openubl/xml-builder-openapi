/* 
 * XML Builder API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0.Final
 * Contact: projectopenubl+subscribe@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SummaryDocumentLineComprobanteValorVenta
    /// </summary>
    [DataContract]
        public partial class SummaryDocumentLineComprobanteValorVenta :  IEquatable<SummaryDocumentLineComprobanteValorVenta>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SummaryDocumentLineComprobanteValorVenta" /> class.
        /// </summary>
        /// <param name="exonerado">exonerado.</param>
        /// <param name="gratuito">gratuito.</param>
        /// <param name="gravado">gravado.</param>
        /// <param name="importeTotal">importeTotal (required).</param>
        /// <param name="inafecto">inafecto.</param>
        /// <param name="otrosCargos">otrosCargos.</param>
        public SummaryDocumentLineComprobanteValorVenta( exonerado = default(),  gratuito = default(),  gravado = default(),  importeTotal = default(),  inafecto = default(),  otrosCargos = default())
        {
            // to ensure "importeTotal" is required (not null)
            if (importeTotal == null)
            {
                throw new InvalidDataException("importeTotal is a required property for SummaryDocumentLineComprobanteValorVenta and cannot be null");
            }
            else
            {
                this.ImporteTotal = importeTotal;
            }
            this.Exonerado = exonerado;
            this.Gratuito = gratuito;
            this.Gravado = gravado;
            this.Inafecto = inafecto;
            this.OtrosCargos = otrosCargos;
        }
        
        /// <summary>
        /// Gets or Sets Exonerado
        /// </summary>
        [DataMember(Name="exonerado", EmitDefaultValue=false)]
        public  Exonerado { get; set; }

        /// <summary>
        /// Gets or Sets Gratuito
        /// </summary>
        [DataMember(Name="gratuito", EmitDefaultValue=false)]
        public  Gratuito { get; set; }

        /// <summary>
        /// Gets or Sets Gravado
        /// </summary>
        [DataMember(Name="gravado", EmitDefaultValue=false)]
        public  Gravado { get; set; }

        /// <summary>
        /// Gets or Sets ImporteTotal
        /// </summary>
        [DataMember(Name="importeTotal", EmitDefaultValue=false)]
        public  ImporteTotal { get; set; }

        /// <summary>
        /// Gets or Sets Inafecto
        /// </summary>
        [DataMember(Name="inafecto", EmitDefaultValue=false)]
        public  Inafecto { get; set; }

        /// <summary>
        /// Gets or Sets OtrosCargos
        /// </summary>
        [DataMember(Name="otrosCargos", EmitDefaultValue=false)]
        public  OtrosCargos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SummaryDocumentLineComprobanteValorVenta {\n");
            sb.Append("  Exonerado: ").Append(Exonerado).Append("\n");
            sb.Append("  Gratuito: ").Append(Gratuito).Append("\n");
            sb.Append("  Gravado: ").Append(Gravado).Append("\n");
            sb.Append("  ImporteTotal: ").Append(ImporteTotal).Append("\n");
            sb.Append("  Inafecto: ").Append(Inafecto).Append("\n");
            sb.Append("  OtrosCargos: ").Append(OtrosCargos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SummaryDocumentLineComprobanteValorVenta);
        }

        /// <summary>
        /// Returns true if SummaryDocumentLineComprobanteValorVenta instances are equal
        /// </summary>
        /// <param name="input">Instance of SummaryDocumentLineComprobanteValorVenta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SummaryDocumentLineComprobanteValorVenta input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Exonerado == input.Exonerado ||
                    (this.Exonerado != null &&
                    this.Exonerado.Equals(input.Exonerado))
                ) && 
                (
                    this.Gratuito == input.Gratuito ||
                    (this.Gratuito != null &&
                    this.Gratuito.Equals(input.Gratuito))
                ) && 
                (
                    this.Gravado == input.Gravado ||
                    (this.Gravado != null &&
                    this.Gravado.Equals(input.Gravado))
                ) && 
                (
                    this.ImporteTotal == input.ImporteTotal ||
                    (this.ImporteTotal != null &&
                    this.ImporteTotal.Equals(input.ImporteTotal))
                ) && 
                (
                    this.Inafecto == input.Inafecto ||
                    (this.Inafecto != null &&
                    this.Inafecto.Equals(input.Inafecto))
                ) && 
                (
                    this.OtrosCargos == input.OtrosCargos ||
                    (this.OtrosCargos != null &&
                    this.OtrosCargos.Equals(input.OtrosCargos))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Exonerado != null)
                    hashCode = hashCode * 59 + this.Exonerado.GetHashCode();
                if (this.Gratuito != null)
                    hashCode = hashCode * 59 + this.Gratuito.GetHashCode();
                if (this.Gravado != null)
                    hashCode = hashCode * 59 + this.Gravado.GetHashCode();
                if (this.ImporteTotal != null)
                    hashCode = hashCode * 59 + this.ImporteTotal.GetHashCode();
                if (this.Inafecto != null)
                    hashCode = hashCode * 59 + this.Inafecto.GetHashCode();
                if (this.OtrosCargos != null)
                    hashCode = hashCode * 59 + this.OtrosCargos.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
