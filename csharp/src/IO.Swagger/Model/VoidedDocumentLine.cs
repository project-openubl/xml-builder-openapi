/* 
 * XML Builder API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0.Final
 * Contact: projectopenubl+subscribe@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// VoidedDocumentLine
    /// </summary>
    [DataContract]
        public partial class VoidedDocumentLine :  IEquatable<VoidedDocumentLine>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VoidedDocumentLine" /> class.
        /// </summary>
        /// <param name="fechaEmision">Fecha en la que se emitió el comprobante a dar de baja. Fecha expresada en milliseconds (required).</param>
        /// <param name="serieNumero">Serie y número del comprobante a dar de baja.</param>
        /// <param name="tipoComprobante">Catalogo 01.</param>
        public VoidedDocumentLine(long? fechaEmision = default(long?), string serieNumero = default(string), string tipoComprobante = default(string))
        {
            // to ensure "fechaEmision" is required (not null)
            if (fechaEmision == null)
            {
                throw new InvalidDataException("fechaEmision is a required property for VoidedDocumentLine and cannot be null");
            }
            else
            {
                this.FechaEmision = fechaEmision;
            }
            this.SerieNumero = serieNumero;
            this.TipoComprobante = tipoComprobante;
        }
        
        /// <summary>
        /// Fecha en la que se emitió el comprobante a dar de baja. Fecha expresada en milliseconds
        /// </summary>
        /// <value>Fecha en la que se emitió el comprobante a dar de baja. Fecha expresada en milliseconds</value>
        [DataMember(Name="fechaEmision", EmitDefaultValue=false)]
        public long? FechaEmision { get; set; }

        /// <summary>
        /// Serie y número del comprobante a dar de baja
        /// </summary>
        /// <value>Serie y número del comprobante a dar de baja</value>
        [DataMember(Name="serieNumero", EmitDefaultValue=false)]
        public string SerieNumero { get; set; }

        /// <summary>
        /// Catalogo 01
        /// </summary>
        /// <value>Catalogo 01</value>
        [DataMember(Name="tipoComprobante", EmitDefaultValue=false)]
        public string TipoComprobante { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VoidedDocumentLine {\n");
            sb.Append("  FechaEmision: ").Append(FechaEmision).Append("\n");
            sb.Append("  SerieNumero: ").Append(SerieNumero).Append("\n");
            sb.Append("  TipoComprobante: ").Append(TipoComprobante).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VoidedDocumentLine);
        }

        /// <summary>
        /// Returns true if VoidedDocumentLine instances are equal
        /// </summary>
        /// <param name="input">Instance of VoidedDocumentLine to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VoidedDocumentLine input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FechaEmision == input.FechaEmision ||
                    (this.FechaEmision != null &&
                    this.FechaEmision.Equals(input.FechaEmision))
                ) && 
                (
                    this.SerieNumero == input.SerieNumero ||
                    (this.SerieNumero != null &&
                    this.SerieNumero.Equals(input.SerieNumero))
                ) && 
                (
                    this.TipoComprobante == input.TipoComprobante ||
                    (this.TipoComprobante != null &&
                    this.TipoComprobante.Equals(input.TipoComprobante))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FechaEmision != null)
                    hashCode = hashCode * 59 + this.FechaEmision.GetHashCode();
                if (this.SerieNumero != null)
                    hashCode = hashCode * 59 + this.SerieNumero.GetHashCode();
                if (this.TipoComprobante != null)
                    hashCode = hashCode * 59 + this.TipoComprobante.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
