/* 
 * XML Builder API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0.Final
 * Contact: projectopenubl+subscribe@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Cliente
    /// </summary>
    [DataContract]
        public partial class Cliente :  IEquatable<Cliente>, IValidatableObject
    {
        /// <summary>
        /// Catalogo 06
        /// </summary>
        /// <value>Catalogo 06</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TipoDocumentoIdentidadEnum
        {
            /// <summary>
            /// Enum DOCTRIBNODOMSINRUC for value: DOC_TRIB_NO_DOM_SIN_RUC
            /// </summary>
            [EnumMember(Value = "DOC_TRIB_NO_DOM_SIN_RUC")]
            DOCTRIBNODOMSINRUC = 1,
            /// <summary>
            /// Enum _0 for value: 0
            /// </summary>
            [EnumMember(Value = "0")]
            _0 = 2,
            /// <summary>
            /// Enum DNI for value: DNI
            /// </summary>
            [EnumMember(Value = "DNI")]
            DNI = 3,
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 4,
            /// <summary>
            /// Enum EXTRANJERIA for value: EXTRANJERIA
            /// </summary>
            [EnumMember(Value = "EXTRANJERIA")]
            EXTRANJERIA = 5,
            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 6,
            /// <summary>
            /// Enum RUC for value: RUC
            /// </summary>
            [EnumMember(Value = "RUC")]
            RUC = 7,
            /// <summary>
            /// Enum _6 for value: 6
            /// </summary>
            [EnumMember(Value = "6")]
            _6 = 8,
            /// <summary>
            /// Enum PASAPORTE for value: PASAPORTE
            /// </summary>
            [EnumMember(Value = "PASAPORTE")]
            PASAPORTE = 9,
            /// <summary>
            /// Enum _7 for value: 7
            /// </summary>
            [EnumMember(Value = "7")]
            _7 = 10,
            /// <summary>
            /// Enum DECDIPLOMATICA for value: DEC_DIPLOMATICA
            /// </summary>
            [EnumMember(Value = "DEC_DIPLOMATICA")]
            DECDIPLOMATICA = 11,
            /// <summary>
            /// Enum A for value: A
            /// </summary>
            [EnumMember(Value = "A")]
            A = 12        }
        /// <summary>
        /// Catalogo 06
        /// </summary>
        /// <value>Catalogo 06</value>
        [DataMember(Name="tipoDocumentoIdentidad", EmitDefaultValue=false)]
        public TipoDocumentoIdentidadEnum TipoDocumentoIdentidad { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Cliente" /> class.
        /// </summary>
        /// <param name="contacto">contacto.</param>
        /// <param name="direccion">direccion.</param>
        /// <param name="nombre">Nombre o Razón Social del cliente (required).</param>
        /// <param name="numeroDocumentoIdentidad">numeroDocumentoIdentidad (required).</param>
        /// <param name="tipoDocumentoIdentidad">Catalogo 06 (required).</param>
        public Cliente(Contacto contacto = default(Contacto), Direccion direccion = default(Direccion), string nombre = default(string), string numeroDocumentoIdentidad = default(string), TipoDocumentoIdentidadEnum tipoDocumentoIdentidad = default(TipoDocumentoIdentidadEnum))
        {
            // to ensure "nombre" is required (not null)
            if (nombre == null)
            {
                throw new InvalidDataException("nombre is a required property for Cliente and cannot be null");
            }
            else
            {
                this.Nombre = nombre;
            }
            // to ensure "numeroDocumentoIdentidad" is required (not null)
            if (numeroDocumentoIdentidad == null)
            {
                throw new InvalidDataException("numeroDocumentoIdentidad is a required property for Cliente and cannot be null");
            }
            else
            {
                this.NumeroDocumentoIdentidad = numeroDocumentoIdentidad;
            }
            // to ensure "tipoDocumentoIdentidad" is required (not null)
            if (tipoDocumentoIdentidad == null)
            {
                throw new InvalidDataException("tipoDocumentoIdentidad is a required property for Cliente and cannot be null");
            }
            else
            {
                this.TipoDocumentoIdentidad = tipoDocumentoIdentidad;
            }
            this.Contacto = contacto;
            this.Direccion = direccion;
        }
        
        /// <summary>
        /// Gets or Sets Contacto
        /// </summary>
        [DataMember(Name="contacto", EmitDefaultValue=false)]
        public Contacto Contacto { get; set; }

        /// <summary>
        /// Gets or Sets Direccion
        /// </summary>
        [DataMember(Name="direccion", EmitDefaultValue=false)]
        public Direccion Direccion { get; set; }

        /// <summary>
        /// Nombre o Razón Social del cliente
        /// </summary>
        /// <value>Nombre o Razón Social del cliente</value>
        [DataMember(Name="nombre", EmitDefaultValue=false)]
        public string Nombre { get; set; }

        /// <summary>
        /// Gets or Sets NumeroDocumentoIdentidad
        /// </summary>
        [DataMember(Name="numeroDocumentoIdentidad", EmitDefaultValue=false)]
        public string NumeroDocumentoIdentidad { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Cliente {\n");
            sb.Append("  Contacto: ").Append(Contacto).Append("\n");
            sb.Append("  Direccion: ").Append(Direccion).Append("\n");
            sb.Append("  Nombre: ").Append(Nombre).Append("\n");
            sb.Append("  NumeroDocumentoIdentidad: ").Append(NumeroDocumentoIdentidad).Append("\n");
            sb.Append("  TipoDocumentoIdentidad: ").Append(TipoDocumentoIdentidad).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Cliente);
        }

        /// <summary>
        /// Returns true if Cliente instances are equal
        /// </summary>
        /// <param name="input">Instance of Cliente to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cliente input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Contacto == input.Contacto ||
                    (this.Contacto != null &&
                    this.Contacto.Equals(input.Contacto))
                ) && 
                (
                    this.Direccion == input.Direccion ||
                    (this.Direccion != null &&
                    this.Direccion.Equals(input.Direccion))
                ) && 
                (
                    this.Nombre == input.Nombre ||
                    (this.Nombre != null &&
                    this.Nombre.Equals(input.Nombre))
                ) && 
                (
                    this.NumeroDocumentoIdentidad == input.NumeroDocumentoIdentidad ||
                    (this.NumeroDocumentoIdentidad != null &&
                    this.NumeroDocumentoIdentidad.Equals(input.NumeroDocumentoIdentidad))
                ) && 
                (
                    this.TipoDocumentoIdentidad == input.TipoDocumentoIdentidad ||
                    (this.TipoDocumentoIdentidad != null &&
                    this.TipoDocumentoIdentidad.Equals(input.TipoDocumentoIdentidad))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Contacto != null)
                    hashCode = hashCode * 59 + this.Contacto.GetHashCode();
                if (this.Direccion != null)
                    hashCode = hashCode * 59 + this.Direccion.GetHashCode();
                if (this.Nombre != null)
                    hashCode = hashCode * 59 + this.Nombre.GetHashCode();
                if (this.NumeroDocumentoIdentidad != null)
                    hashCode = hashCode * 59 + this.NumeroDocumentoIdentidad.GetHashCode();
                if (this.TipoDocumentoIdentidad != null)
                    hashCode = hashCode * 59 + this.TipoDocumentoIdentidad.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
