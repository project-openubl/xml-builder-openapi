/* 
 * XML Builder API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0.Final
 * Contact: projectopenubl+subscribe@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreditNoteOutputModel
    /// </summary>
    [DataContract]
        public partial class CreditNoteOutputModel :  IEquatable<CreditNoteOutputModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditNoteOutputModel" /> class.
        /// </summary>
        /// <param name="cliente">cliente (required).</param>
        /// <param name="detalle">detalle.</param>
        /// <param name="fechaEmision">fechaEmision.</param>
        /// <param name="firmante">firmante (required).</param>
        /// <param name="horaEmision">horaEmision.</param>
        /// <param name="impuestos">impuestos (required).</param>
        /// <param name="moneda">moneda.</param>
        /// <param name="proveedor">proveedor (required).</param>
        /// <param name="serieNumero">serieNumero.</param>
        /// <param name="totales">totales (required).</param>
        /// <param name="descripcionSustentoDeNota">descripcionSustentoDeNota.</param>
        /// <param name="serieNumeroComprobanteAfectado">serieNumeroComprobanteAfectado.</param>
        /// <param name="tipoDocumentoComprobanteAfectado">tipoDocumentoComprobanteAfectado (required).</param>
        /// <param name="tipoNota">tipoNota (required).</param>
        public CreditNoteOutputModel( cliente = default(),  detalle = default(), string fechaEmision = default(string),  firmante = default(), string horaEmision = default(string),  impuestos = default(), string moneda = default(string),  proveedor = default(), string serieNumero = default(string),  totales = default(), string descripcionSustentoDeNota = default(string), string serieNumeroComprobanteAfectado = default(string),  tipoDocumentoComprobanteAfectado = default(),  tipoNota = default())
        {
            // to ensure "cliente" is required (not null)
            if (cliente == null)
            {
                throw new InvalidDataException("cliente is a required property for CreditNoteOutputModel and cannot be null");
            }
            else
            {
                this.Cliente = cliente;
            }
            // to ensure "firmante" is required (not null)
            if (firmante == null)
            {
                throw new InvalidDataException("firmante is a required property for CreditNoteOutputModel and cannot be null");
            }
            else
            {
                this.Firmante = firmante;
            }
            // to ensure "impuestos" is required (not null)
            if (impuestos == null)
            {
                throw new InvalidDataException("impuestos is a required property for CreditNoteOutputModel and cannot be null");
            }
            else
            {
                this.Impuestos = impuestos;
            }
            // to ensure "proveedor" is required (not null)
            if (proveedor == null)
            {
                throw new InvalidDataException("proveedor is a required property for CreditNoteOutputModel and cannot be null");
            }
            else
            {
                this.Proveedor = proveedor;
            }
            // to ensure "totales" is required (not null)
            if (totales == null)
            {
                throw new InvalidDataException("totales is a required property for CreditNoteOutputModel and cannot be null");
            }
            else
            {
                this.Totales = totales;
            }
            // to ensure "tipoDocumentoComprobanteAfectado" is required (not null)
            if (tipoDocumentoComprobanteAfectado == null)
            {
                throw new InvalidDataException("tipoDocumentoComprobanteAfectado is a required property for CreditNoteOutputModel and cannot be null");
            }
            else
            {
                this.TipoDocumentoComprobanteAfectado = tipoDocumentoComprobanteAfectado;
            }
            // to ensure "tipoNota" is required (not null)
            if (tipoNota == null)
            {
                throw new InvalidDataException("tipoNota is a required property for CreditNoteOutputModel and cannot be null");
            }
            else
            {
                this.TipoNota = tipoNota;
            }
            this.Detalle = detalle;
            this.FechaEmision = fechaEmision;
            this.HoraEmision = horaEmision;
            this.Moneda = moneda;
            this.SerieNumero = serieNumero;
            this.DescripcionSustentoDeNota = descripcionSustentoDeNota;
            this.SerieNumeroComprobanteAfectado = serieNumeroComprobanteAfectado;
        }
        
        /// <summary>
        /// Gets or Sets Cliente
        /// </summary>
        [DataMember(Name="cliente", EmitDefaultValue=false)]
        public  Cliente { get; set; }

        /// <summary>
        /// Gets or Sets Detalle
        /// </summary>
        [DataMember(Name="detalle", EmitDefaultValue=false)]
        public  Detalle { get; set; }

        /// <summary>
        /// Gets or Sets FechaEmision
        /// </summary>
        [DataMember(Name="fechaEmision", EmitDefaultValue=false)]
        public string FechaEmision { get; set; }

        /// <summary>
        /// Gets or Sets Firmante
        /// </summary>
        [DataMember(Name="firmante", EmitDefaultValue=false)]
        public  Firmante { get; set; }

        /// <summary>
        /// Gets or Sets HoraEmision
        /// </summary>
        [DataMember(Name="horaEmision", EmitDefaultValue=false)]
        public string HoraEmision { get; set; }

        /// <summary>
        /// Gets or Sets Impuestos
        /// </summary>
        [DataMember(Name="impuestos", EmitDefaultValue=false)]
        public  Impuestos { get; set; }

        /// <summary>
        /// Gets or Sets Moneda
        /// </summary>
        [DataMember(Name="moneda", EmitDefaultValue=false)]
        public string Moneda { get; set; }

        /// <summary>
        /// Gets or Sets Proveedor
        /// </summary>
        [DataMember(Name="proveedor", EmitDefaultValue=false)]
        public  Proveedor { get; set; }

        /// <summary>
        /// Gets or Sets SerieNumero
        /// </summary>
        [DataMember(Name="serieNumero", EmitDefaultValue=false)]
        public string SerieNumero { get; set; }

        /// <summary>
        /// Gets or Sets Totales
        /// </summary>
        [DataMember(Name="totales", EmitDefaultValue=false)]
        public  Totales { get; set; }

        /// <summary>
        /// Gets or Sets DescripcionSustentoDeNota
        /// </summary>
        [DataMember(Name="descripcionSustentoDeNota", EmitDefaultValue=false)]
        public string DescripcionSustentoDeNota { get; set; }

        /// <summary>
        /// Gets or Sets SerieNumeroComprobanteAfectado
        /// </summary>
        [DataMember(Name="serieNumeroComprobanteAfectado", EmitDefaultValue=false)]
        public string SerieNumeroComprobanteAfectado { get; set; }

        /// <summary>
        /// Gets or Sets TipoDocumentoComprobanteAfectado
        /// </summary>
        [DataMember(Name="tipoDocumentoComprobanteAfectado", EmitDefaultValue=false)]
        public  TipoDocumentoComprobanteAfectado { get; set; }

        /// <summary>
        /// Gets or Sets TipoNota
        /// </summary>
        [DataMember(Name="tipoNota", EmitDefaultValue=false)]
        public  TipoNota { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditNoteOutputModel {\n");
            sb.Append("  Cliente: ").Append(Cliente).Append("\n");
            sb.Append("  Detalle: ").Append(Detalle).Append("\n");
            sb.Append("  FechaEmision: ").Append(FechaEmision).Append("\n");
            sb.Append("  Firmante: ").Append(Firmante).Append("\n");
            sb.Append("  HoraEmision: ").Append(HoraEmision).Append("\n");
            sb.Append("  Impuestos: ").Append(Impuestos).Append("\n");
            sb.Append("  Moneda: ").Append(Moneda).Append("\n");
            sb.Append("  Proveedor: ").Append(Proveedor).Append("\n");
            sb.Append("  SerieNumero: ").Append(SerieNumero).Append("\n");
            sb.Append("  Totales: ").Append(Totales).Append("\n");
            sb.Append("  DescripcionSustentoDeNota: ").Append(DescripcionSustentoDeNota).Append("\n");
            sb.Append("  SerieNumeroComprobanteAfectado: ").Append(SerieNumeroComprobanteAfectado).Append("\n");
            sb.Append("  TipoDocumentoComprobanteAfectado: ").Append(TipoDocumentoComprobanteAfectado).Append("\n");
            sb.Append("  TipoNota: ").Append(TipoNota).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreditNoteOutputModel);
        }

        /// <summary>
        /// Returns true if CreditNoteOutputModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CreditNoteOutputModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditNoteOutputModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Cliente == input.Cliente ||
                    (this.Cliente != null &&
                    this.Cliente.Equals(input.Cliente))
                ) && 
                (
                    this.Detalle == input.Detalle ||
                    (this.Detalle != null &&
                    this.Detalle.Equals(input.Detalle))
                ) && 
                (
                    this.FechaEmision == input.FechaEmision ||
                    (this.FechaEmision != null &&
                    this.FechaEmision.Equals(input.FechaEmision))
                ) && 
                (
                    this.Firmante == input.Firmante ||
                    (this.Firmante != null &&
                    this.Firmante.Equals(input.Firmante))
                ) && 
                (
                    this.HoraEmision == input.HoraEmision ||
                    (this.HoraEmision != null &&
                    this.HoraEmision.Equals(input.HoraEmision))
                ) && 
                (
                    this.Impuestos == input.Impuestos ||
                    (this.Impuestos != null &&
                    this.Impuestos.Equals(input.Impuestos))
                ) && 
                (
                    this.Moneda == input.Moneda ||
                    (this.Moneda != null &&
                    this.Moneda.Equals(input.Moneda))
                ) && 
                (
                    this.Proveedor == input.Proveedor ||
                    (this.Proveedor != null &&
                    this.Proveedor.Equals(input.Proveedor))
                ) && 
                (
                    this.SerieNumero == input.SerieNumero ||
                    (this.SerieNumero != null &&
                    this.SerieNumero.Equals(input.SerieNumero))
                ) && 
                (
                    this.Totales == input.Totales ||
                    (this.Totales != null &&
                    this.Totales.Equals(input.Totales))
                ) && 
                (
                    this.DescripcionSustentoDeNota == input.DescripcionSustentoDeNota ||
                    (this.DescripcionSustentoDeNota != null &&
                    this.DescripcionSustentoDeNota.Equals(input.DescripcionSustentoDeNota))
                ) && 
                (
                    this.SerieNumeroComprobanteAfectado == input.SerieNumeroComprobanteAfectado ||
                    (this.SerieNumeroComprobanteAfectado != null &&
                    this.SerieNumeroComprobanteAfectado.Equals(input.SerieNumeroComprobanteAfectado))
                ) && 
                (
                    this.TipoDocumentoComprobanteAfectado == input.TipoDocumentoComprobanteAfectado ||
                    (this.TipoDocumentoComprobanteAfectado != null &&
                    this.TipoDocumentoComprobanteAfectado.Equals(input.TipoDocumentoComprobanteAfectado))
                ) && 
                (
                    this.TipoNota == input.TipoNota ||
                    (this.TipoNota != null &&
                    this.TipoNota.Equals(input.TipoNota))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cliente != null)
                    hashCode = hashCode * 59 + this.Cliente.GetHashCode();
                if (this.Detalle != null)
                    hashCode = hashCode * 59 + this.Detalle.GetHashCode();
                if (this.FechaEmision != null)
                    hashCode = hashCode * 59 + this.FechaEmision.GetHashCode();
                if (this.Firmante != null)
                    hashCode = hashCode * 59 + this.Firmante.GetHashCode();
                if (this.HoraEmision != null)
                    hashCode = hashCode * 59 + this.HoraEmision.GetHashCode();
                if (this.Impuestos != null)
                    hashCode = hashCode * 59 + this.Impuestos.GetHashCode();
                if (this.Moneda != null)
                    hashCode = hashCode * 59 + this.Moneda.GetHashCode();
                if (this.Proveedor != null)
                    hashCode = hashCode * 59 + this.Proveedor.GetHashCode();
                if (this.SerieNumero != null)
                    hashCode = hashCode * 59 + this.SerieNumero.GetHashCode();
                if (this.Totales != null)
                    hashCode = hashCode * 59 + this.Totales.GetHashCode();
                if (this.DescripcionSustentoDeNota != null)
                    hashCode = hashCode * 59 + this.DescripcionSustentoDeNota.GetHashCode();
                if (this.SerieNumeroComprobanteAfectado != null)
                    hashCode = hashCode * 59 + this.SerieNumeroComprobanteAfectado.GetHashCode();
                if (this.TipoDocumentoComprobanteAfectado != null)
                    hashCode = hashCode * 59 + this.TipoDocumentoComprobanteAfectado.GetHashCode();
                if (this.TipoNota != null)
                    hashCode = hashCode * 59 + this.TipoNota.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
