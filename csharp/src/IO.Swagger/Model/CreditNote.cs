/* 
 * XML Builder API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0.Final
 * Contact: projectopenubl+subscribe@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreditNote
    /// </summary>
    [DataContract]
        public partial class CreditNote :  IEquatable<CreditNote>, IValidatableObject
    {
        /// <summary>
        /// Catalogo 09
        /// </summary>
        /// <value>Catalogo 09</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TipoNotaEnum
        {
            /// <summary>
            /// Enum ANULACIONDELAOPERACION for value: ANULACION_DE_LA_OPERACION
            /// </summary>
            [EnumMember(Value = "ANULACION_DE_LA_OPERACION")]
            ANULACIONDELAOPERACION = 1,
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            [EnumMember(Value = "01")]
            _01 = 2,
            /// <summary>
            /// Enum ANULACIONPORERRORENELRUC for value: ANULACION_POR_ERROR_EN_EL_RUC
            /// </summary>
            [EnumMember(Value = "ANULACION_POR_ERROR_EN_EL_RUC")]
            ANULACIONPORERRORENELRUC = 3,
            /// <summary>
            /// Enum _02 for value: 02
            /// </summary>
            [EnumMember(Value = "02")]
            _02 = 4,
            /// <summary>
            /// Enum CORRECCIONPORERRORENLADESCRIPCION for value: CORRECCION_POR_ERROR_EN_LA_DESCRIPCION
            /// </summary>
            [EnumMember(Value = "CORRECCION_POR_ERROR_EN_LA_DESCRIPCION")]
            CORRECCIONPORERRORENLADESCRIPCION = 5,
            /// <summary>
            /// Enum _03 for value: 03
            /// </summary>
            [EnumMember(Value = "03")]
            _03 = 6,
            /// <summary>
            /// Enum DESCUENTOGLOBAL for value: DESCUENTO_GLOBAL
            /// </summary>
            [EnumMember(Value = "DESCUENTO_GLOBAL")]
            DESCUENTOGLOBAL = 7,
            /// <summary>
            /// Enum _04 for value: 04
            /// </summary>
            [EnumMember(Value = "04")]
            _04 = 8,
            /// <summary>
            /// Enum DESCUENTOPORITEM for value: DESCUENTO_POR_ITEM
            /// </summary>
            [EnumMember(Value = "DESCUENTO_POR_ITEM")]
            DESCUENTOPORITEM = 9,
            /// <summary>
            /// Enum _05 for value: 05
            /// </summary>
            [EnumMember(Value = "05")]
            _05 = 10,
            /// <summary>
            /// Enum DEVOLUCIONTOTAL for value: DEVOLUCION_TOTAL
            /// </summary>
            [EnumMember(Value = "DEVOLUCION_TOTAL")]
            DEVOLUCIONTOTAL = 11,
            /// <summary>
            /// Enum _06 for value: 06
            /// </summary>
            [EnumMember(Value = "06")]
            _06 = 12,
            /// <summary>
            /// Enum DEVOLUCIONPORITEM for value: DEVOLUCION_POR_ITEM
            /// </summary>
            [EnumMember(Value = "DEVOLUCION_POR_ITEM")]
            DEVOLUCIONPORITEM = 13,
            /// <summary>
            /// Enum _07 for value: 07
            /// </summary>
            [EnumMember(Value = "07")]
            _07 = 14,
            /// <summary>
            /// Enum BONIFICACION for value: BONIFICACION
            /// </summary>
            [EnumMember(Value = "BONIFICACION")]
            BONIFICACION = 15,
            /// <summary>
            /// Enum _08 for value: 08
            /// </summary>
            [EnumMember(Value = "08")]
            _08 = 16,
            /// <summary>
            /// Enum DISMINUCIONENELVALOR for value: DISMINUCION_EN_EL_VALOR
            /// </summary>
            [EnumMember(Value = "DISMINUCION_EN_EL_VALOR")]
            DISMINUCIONENELVALOR = 17,
            /// <summary>
            /// Enum _09 for value: 09
            /// </summary>
            [EnumMember(Value = "09")]
            _09 = 18,
            /// <summary>
            /// Enum OTROSCONCEPTOS for value: OTROS_CONCEPTOS
            /// </summary>
            [EnumMember(Value = "OTROS_CONCEPTOS")]
            OTROSCONCEPTOS = 19,
            /// <summary>
            /// Enum _10 for value: 10
            /// </summary>
            [EnumMember(Value = "10")]
            _10 = 20        }
        /// <summary>
        /// Catalogo 09
        /// </summary>
        /// <value>Catalogo 09</value>
        [DataMember(Name="tipoNota", EmitDefaultValue=false)]
        public TipoNotaEnum? TipoNota { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditNote" /> class.
        /// </summary>
        /// <param name="cliente">cliente (required).</param>
        /// <param name="detalle">detalle (required).</param>
        /// <param name="fechaEmision">Fecha expresada en milliseconds.</param>
        /// <param name="firmante">firmante.</param>
        /// <param name="numero">numero (required).</param>
        /// <param name="proveedor">proveedor (required).</param>
        /// <param name="serie">serie (required).</param>
        /// <param name="descripcionSustentoDeNota">Razón por la que se crea la nota (required).</param>
        /// <param name="serieNumeroComprobanteAfectado">Serie y número del comprobante afectado por la nota (required).</param>
        /// <param name="tipoNota">Catalogo 09.</param>
        public CreditNote( cliente = default(),  detalle = default(), long? fechaEmision = default(long?),  firmante = default(), int? numero = default(int?),  proveedor = default(), string serie = default(string), string descripcionSustentoDeNota = default(string), string serieNumeroComprobanteAfectado = default(string), TipoNotaEnum? tipoNota = default(TipoNotaEnum?))
        {
            // to ensure "cliente" is required (not null)
            if (cliente == null)
            {
                throw new InvalidDataException("cliente is a required property for CreditNote and cannot be null");
            }
            else
            {
                this.Cliente = cliente;
            }
            // to ensure "detalle" is required (not null)
            if (detalle == null)
            {
                throw new InvalidDataException("detalle is a required property for CreditNote and cannot be null");
            }
            else
            {
                this.Detalle = detalle;
            }
            // to ensure "numero" is required (not null)
            if (numero == null)
            {
                throw new InvalidDataException("numero is a required property for CreditNote and cannot be null");
            }
            else
            {
                this.Numero = numero;
            }
            // to ensure "proveedor" is required (not null)
            if (proveedor == null)
            {
                throw new InvalidDataException("proveedor is a required property for CreditNote and cannot be null");
            }
            else
            {
                this.Proveedor = proveedor;
            }
            // to ensure "serie" is required (not null)
            if (serie == null)
            {
                throw new InvalidDataException("serie is a required property for CreditNote and cannot be null");
            }
            else
            {
                this.Serie = serie;
            }
            // to ensure "descripcionSustentoDeNota" is required (not null)
            if (descripcionSustentoDeNota == null)
            {
                throw new InvalidDataException("descripcionSustentoDeNota is a required property for CreditNote and cannot be null");
            }
            else
            {
                this.DescripcionSustentoDeNota = descripcionSustentoDeNota;
            }
            // to ensure "serieNumeroComprobanteAfectado" is required (not null)
            if (serieNumeroComprobanteAfectado == null)
            {
                throw new InvalidDataException("serieNumeroComprobanteAfectado is a required property for CreditNote and cannot be null");
            }
            else
            {
                this.SerieNumeroComprobanteAfectado = serieNumeroComprobanteAfectado;
            }
            this.FechaEmision = fechaEmision;
            this.Firmante = firmante;
            this.TipoNota = tipoNota;
        }
        
        /// <summary>
        /// Gets or Sets Cliente
        /// </summary>
        [DataMember(Name="cliente", EmitDefaultValue=false)]
        public  Cliente { get; set; }

        /// <summary>
        /// Gets or Sets Detalle
        /// </summary>
        [DataMember(Name="detalle", EmitDefaultValue=false)]
        public  Detalle { get; set; }

        /// <summary>
        /// Fecha expresada en milliseconds
        /// </summary>
        /// <value>Fecha expresada en milliseconds</value>
        [DataMember(Name="fechaEmision", EmitDefaultValue=false)]
        public long? FechaEmision { get; set; }

        /// <summary>
        /// Gets or Sets Firmante
        /// </summary>
        [DataMember(Name="firmante", EmitDefaultValue=false)]
        public  Firmante { get; set; }

        /// <summary>
        /// Gets or Sets Numero
        /// </summary>
        [DataMember(Name="numero", EmitDefaultValue=false)]
        public int? Numero { get; set; }

        /// <summary>
        /// Gets or Sets Proveedor
        /// </summary>
        [DataMember(Name="proveedor", EmitDefaultValue=false)]
        public  Proveedor { get; set; }

        /// <summary>
        /// Gets or Sets Serie
        /// </summary>
        [DataMember(Name="serie", EmitDefaultValue=false)]
        public string Serie { get; set; }

        /// <summary>
        /// Razón por la que se crea la nota
        /// </summary>
        /// <value>Razón por la que se crea la nota</value>
        [DataMember(Name="descripcionSustentoDeNota", EmitDefaultValue=false)]
        public string DescripcionSustentoDeNota { get; set; }

        /// <summary>
        /// Serie y número del comprobante afectado por la nota
        /// </summary>
        /// <value>Serie y número del comprobante afectado por la nota</value>
        [DataMember(Name="serieNumeroComprobanteAfectado", EmitDefaultValue=false)]
        public string SerieNumeroComprobanteAfectado { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditNote {\n");
            sb.Append("  Cliente: ").Append(Cliente).Append("\n");
            sb.Append("  Detalle: ").Append(Detalle).Append("\n");
            sb.Append("  FechaEmision: ").Append(FechaEmision).Append("\n");
            sb.Append("  Firmante: ").Append(Firmante).Append("\n");
            sb.Append("  Numero: ").Append(Numero).Append("\n");
            sb.Append("  Proveedor: ").Append(Proveedor).Append("\n");
            sb.Append("  Serie: ").Append(Serie).Append("\n");
            sb.Append("  DescripcionSustentoDeNota: ").Append(DescripcionSustentoDeNota).Append("\n");
            sb.Append("  SerieNumeroComprobanteAfectado: ").Append(SerieNumeroComprobanteAfectado).Append("\n");
            sb.Append("  TipoNota: ").Append(TipoNota).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreditNote);
        }

        /// <summary>
        /// Returns true if CreditNote instances are equal
        /// </summary>
        /// <param name="input">Instance of CreditNote to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditNote input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Cliente == input.Cliente ||
                    (this.Cliente != null &&
                    this.Cliente.Equals(input.Cliente))
                ) && 
                (
                    this.Detalle == input.Detalle ||
                    (this.Detalle != null &&
                    this.Detalle.Equals(input.Detalle))
                ) && 
                (
                    this.FechaEmision == input.FechaEmision ||
                    (this.FechaEmision != null &&
                    this.FechaEmision.Equals(input.FechaEmision))
                ) && 
                (
                    this.Firmante == input.Firmante ||
                    (this.Firmante != null &&
                    this.Firmante.Equals(input.Firmante))
                ) && 
                (
                    this.Numero == input.Numero ||
                    (this.Numero != null &&
                    this.Numero.Equals(input.Numero))
                ) && 
                (
                    this.Proveedor == input.Proveedor ||
                    (this.Proveedor != null &&
                    this.Proveedor.Equals(input.Proveedor))
                ) && 
                (
                    this.Serie == input.Serie ||
                    (this.Serie != null &&
                    this.Serie.Equals(input.Serie))
                ) && 
                (
                    this.DescripcionSustentoDeNota == input.DescripcionSustentoDeNota ||
                    (this.DescripcionSustentoDeNota != null &&
                    this.DescripcionSustentoDeNota.Equals(input.DescripcionSustentoDeNota))
                ) && 
                (
                    this.SerieNumeroComprobanteAfectado == input.SerieNumeroComprobanteAfectado ||
                    (this.SerieNumeroComprobanteAfectado != null &&
                    this.SerieNumeroComprobanteAfectado.Equals(input.SerieNumeroComprobanteAfectado))
                ) && 
                (
                    this.TipoNota == input.TipoNota ||
                    (this.TipoNota != null &&
                    this.TipoNota.Equals(input.TipoNota))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cliente != null)
                    hashCode = hashCode * 59 + this.Cliente.GetHashCode();
                if (this.Detalle != null)
                    hashCode = hashCode * 59 + this.Detalle.GetHashCode();
                if (this.FechaEmision != null)
                    hashCode = hashCode * 59 + this.FechaEmision.GetHashCode();
                if (this.Firmante != null)
                    hashCode = hashCode * 59 + this.Firmante.GetHashCode();
                if (this.Numero != null)
                    hashCode = hashCode * 59 + this.Numero.GetHashCode();
                if (this.Proveedor != null)
                    hashCode = hashCode * 59 + this.Proveedor.GetHashCode();
                if (this.Serie != null)
                    hashCode = hashCode * 59 + this.Serie.GetHashCode();
                if (this.DescripcionSustentoDeNota != null)
                    hashCode = hashCode * 59 + this.DescripcionSustentoDeNota.GetHashCode();
                if (this.SerieNumeroComprobanteAfectado != null)
                    hashCode = hashCode * 59 + this.SerieNumeroComprobanteAfectado.GetHashCode();
                if (this.TipoNota != null)
                    hashCode = hashCode * 59 + this.TipoNota.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
