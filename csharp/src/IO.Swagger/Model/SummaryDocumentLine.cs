/* 
 * XML Builder API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0.Final
 * Contact: projectopenubl+subscribe@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SummaryDocumentLine
    /// </summary>
    [DataContract]
        public partial class SummaryDocumentLine :  IEquatable<SummaryDocumentLine>, IValidatableObject
    {
        /// <summary>
        /// Catalogo 19
        /// </summary>
        /// <value>Catalogo 19</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TipoOperacionEnum
        {
            /// <summary>
            /// Enum ADICIONAR for value: ADICIONAR
            /// </summary>
            [EnumMember(Value = "ADICIONAR")]
            ADICIONAR = 1,
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 2,
            /// <summary>
            /// Enum MODIFICAR for value: MODIFICAR
            /// </summary>
            [EnumMember(Value = "MODIFICAR")]
            MODIFICAR = 3,
            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 4,
            /// <summary>
            /// Enum ANULADO for value: ANULADO
            /// </summary>
            [EnumMember(Value = "ANULADO")]
            ANULADO = 5,
            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 6        }
        /// <summary>
        /// Catalogo 19
        /// </summary>
        /// <value>Catalogo 19</value>
        [DataMember(Name="tipoOperacion", EmitDefaultValue=false)]
        public TipoOperacionEnum TipoOperacion { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SummaryDocumentLine" /> class.
        /// </summary>
        /// <param name="comprobante">comprobante (required).</param>
        /// <param name="comprobanteAfectado">comprobanteAfectado.</param>
        /// <param name="tipoOperacion">Catalogo 19 (required).</param>
        public SummaryDocumentLine( comprobante = default(),  comprobanteAfectado = default(), TipoOperacionEnum tipoOperacion = default(TipoOperacionEnum))
        {
            // to ensure "comprobante" is required (not null)
            if (comprobante == null)
            {
                throw new InvalidDataException("comprobante is a required property for SummaryDocumentLine and cannot be null");
            }
            else
            {
                this.Comprobante = comprobante;
            }
            // to ensure "tipoOperacion" is required (not null)
            if (tipoOperacion == null)
            {
                throw new InvalidDataException("tipoOperacion is a required property for SummaryDocumentLine and cannot be null");
            }
            else
            {
                this.TipoOperacion = tipoOperacion;
            }
            this.ComprobanteAfectado = comprobanteAfectado;
        }
        
        /// <summary>
        /// Gets or Sets Comprobante
        /// </summary>
        [DataMember(Name="comprobante", EmitDefaultValue=false)]
        public  Comprobante { get; set; }

        /// <summary>
        /// Gets or Sets ComprobanteAfectado
        /// </summary>
        [DataMember(Name="comprobanteAfectado", EmitDefaultValue=false)]
        public  ComprobanteAfectado { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SummaryDocumentLine {\n");
            sb.Append("  Comprobante: ").Append(Comprobante).Append("\n");
            sb.Append("  ComprobanteAfectado: ").Append(ComprobanteAfectado).Append("\n");
            sb.Append("  TipoOperacion: ").Append(TipoOperacion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SummaryDocumentLine);
        }

        /// <summary>
        /// Returns true if SummaryDocumentLine instances are equal
        /// </summary>
        /// <param name="input">Instance of SummaryDocumentLine to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SummaryDocumentLine input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Comprobante == input.Comprobante ||
                    (this.Comprobante != null &&
                    this.Comprobante.Equals(input.Comprobante))
                ) && 
                (
                    this.ComprobanteAfectado == input.ComprobanteAfectado ||
                    (this.ComprobanteAfectado != null &&
                    this.ComprobanteAfectado.Equals(input.ComprobanteAfectado))
                ) && 
                (
                    this.TipoOperacion == input.TipoOperacion ||
                    (this.TipoOperacion != null &&
                    this.TipoOperacion.Equals(input.TipoOperacion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Comprobante != null)
                    hashCode = hashCode * 59 + this.Comprobante.GetHashCode();
                if (this.ComprobanteAfectado != null)
                    hashCode = hashCode * 59 + this.ComprobanteAfectado.GetHashCode();
                if (this.TipoOperacion != null)
                    hashCode = hashCode * 59 + this.TipoOperacion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
