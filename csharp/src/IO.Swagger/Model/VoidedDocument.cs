/* 
 * XML Builder API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0.Final
 * Contact: projectopenubl+subscribe@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// VoidedDocument
    /// </summary>
    [DataContract]
        public partial class VoidedDocument :  IEquatable<VoidedDocument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VoidedDocument" /> class.
        /// </summary>
        /// <param name="comprobante">comprobante (required).</param>
        /// <param name="descripcionSustento">Razón por la que se da de baja el comprobante (required).</param>
        /// <param name="fechaEmision">Fecha en la que se emite el comprobante de Baja. Fecha expresada en milliseconds.</param>
        /// <param name="firmante">firmante.</param>
        /// <param name="numero">Número de Comprobante de Baja emitida durante el día (required).</param>
        /// <param name="proveedor">proveedor (required).</param>
        public VoidedDocument( comprobante = default(), string descripcionSustento = default(string), long? fechaEmision = default(long?), Firmante firmante = default(Firmante), int? numero = default(int?),  proveedor = default())
        {
            // to ensure "comprobante" is required (not null)
            if (comprobante == null)
            {
                throw new InvalidDataException("comprobante is a required property for VoidedDocument and cannot be null");
            }
            else
            {
                this.Comprobante = comprobante;
            }
            // to ensure "descripcionSustento" is required (not null)
            if (descripcionSustento == null)
            {
                throw new InvalidDataException("descripcionSustento is a required property for VoidedDocument and cannot be null");
            }
            else
            {
                this.DescripcionSustento = descripcionSustento;
            }
            // to ensure "numero" is required (not null)
            if (numero == null)
            {
                throw new InvalidDataException("numero is a required property for VoidedDocument and cannot be null");
            }
            else
            {
                this.Numero = numero;
            }
            // to ensure "proveedor" is required (not null)
            if (proveedor == null)
            {
                throw new InvalidDataException("proveedor is a required property for VoidedDocument and cannot be null");
            }
            else
            {
                this.Proveedor = proveedor;
            }
            this.FechaEmision = fechaEmision;
            this.Firmante = firmante;
        }
        
        /// <summary>
        /// Gets or Sets Comprobante
        /// </summary>
        [DataMember(Name="comprobante", EmitDefaultValue=false)]
        public  Comprobante { get; set; }

        /// <summary>
        /// Razón por la que se da de baja el comprobante
        /// </summary>
        /// <value>Razón por la que se da de baja el comprobante</value>
        [DataMember(Name="descripcionSustento", EmitDefaultValue=false)]
        public string DescripcionSustento { get; set; }

        /// <summary>
        /// Fecha en la que se emite el comprobante de Baja. Fecha expresada en milliseconds
        /// </summary>
        /// <value>Fecha en la que se emite el comprobante de Baja. Fecha expresada en milliseconds</value>
        [DataMember(Name="fechaEmision", EmitDefaultValue=false)]
        public long? FechaEmision { get; set; }

        /// <summary>
        /// Gets or Sets Firmante
        /// </summary>
        [DataMember(Name="firmante", EmitDefaultValue=false)]
        public Firmante Firmante { get; set; }

        /// <summary>
        /// Número de Comprobante de Baja emitida durante el día
        /// </summary>
        /// <value>Número de Comprobante de Baja emitida durante el día</value>
        [DataMember(Name="numero", EmitDefaultValue=false)]
        public int? Numero { get; set; }

        /// <summary>
        /// Gets or Sets Proveedor
        /// </summary>
        [DataMember(Name="proveedor", EmitDefaultValue=false)]
        public  Proveedor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VoidedDocument {\n");
            sb.Append("  Comprobante: ").Append(Comprobante).Append("\n");
            sb.Append("  DescripcionSustento: ").Append(DescripcionSustento).Append("\n");
            sb.Append("  FechaEmision: ").Append(FechaEmision).Append("\n");
            sb.Append("  Firmante: ").Append(Firmante).Append("\n");
            sb.Append("  Numero: ").Append(Numero).Append("\n");
            sb.Append("  Proveedor: ").Append(Proveedor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VoidedDocument);
        }

        /// <summary>
        /// Returns true if VoidedDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of VoidedDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VoidedDocument input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Comprobante == input.Comprobante ||
                    (this.Comprobante != null &&
                    this.Comprobante.Equals(input.Comprobante))
                ) && 
                (
                    this.DescripcionSustento == input.DescripcionSustento ||
                    (this.DescripcionSustento != null &&
                    this.DescripcionSustento.Equals(input.DescripcionSustento))
                ) && 
                (
                    this.FechaEmision == input.FechaEmision ||
                    (this.FechaEmision != null &&
                    this.FechaEmision.Equals(input.FechaEmision))
                ) && 
                (
                    this.Firmante == input.Firmante ||
                    (this.Firmante != null &&
                    this.Firmante.Equals(input.Firmante))
                ) && 
                (
                    this.Numero == input.Numero ||
                    (this.Numero != null &&
                    this.Numero.Equals(input.Numero))
                ) && 
                (
                    this.Proveedor == input.Proveedor ||
                    (this.Proveedor != null &&
                    this.Proveedor.Equals(input.Proveedor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Comprobante != null)
                    hashCode = hashCode * 59 + this.Comprobante.GetHashCode();
                if (this.DescripcionSustento != null)
                    hashCode = hashCode * 59 + this.DescripcionSustento.GetHashCode();
                if (this.FechaEmision != null)
                    hashCode = hashCode * 59 + this.FechaEmision.GetHashCode();
                if (this.Firmante != null)
                    hashCode = hashCode * 59 + this.Firmante.GetHashCode();
                if (this.Numero != null)
                    hashCode = hashCode * 59 + this.Numero.GetHashCode();
                if (this.Proveedor != null)
                    hashCode = hashCode * 59 + this.Proveedor.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
