/* 
 * XML Builder API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0.Final
 * Contact: projectopenubl+subscribe@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SummaryDocumentLineOutputModel
    /// </summary>
    [DataContract]
        public partial class SummaryDocumentLineOutputModel :  IEquatable<SummaryDocumentLineOutputModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SummaryDocumentLineOutputModel" /> class.
        /// </summary>
        /// <param name="comprobante">comprobante (required).</param>
        /// <param name="comprobanteAfectado">comprobanteAfectado.</param>
        /// <param name="tipoOperacion">tipoOperacion (required).</param>
        public SummaryDocumentLineOutputModel( comprobante = default(), SummaryDocumentComprobanteAfectadoOutputModel comprobanteAfectado = default(SummaryDocumentComprobanteAfectadoOutputModel),  tipoOperacion = default())
        {
            // to ensure "comprobante" is required (not null)
            if (comprobante == null)
            {
                throw new InvalidDataException("comprobante is a required property for SummaryDocumentLineOutputModel and cannot be null");
            }
            else
            {
                this.Comprobante = comprobante;
            }
            // to ensure "tipoOperacion" is required (not null)
            if (tipoOperacion == null)
            {
                throw new InvalidDataException("tipoOperacion is a required property for SummaryDocumentLineOutputModel and cannot be null");
            }
            else
            {
                this.TipoOperacion = tipoOperacion;
            }
            this.ComprobanteAfectado = comprobanteAfectado;
        }
        
        /// <summary>
        /// Gets or Sets Comprobante
        /// </summary>
        [DataMember(Name="comprobante", EmitDefaultValue=false)]
        public  Comprobante { get; set; }

        /// <summary>
        /// Gets or Sets ComprobanteAfectado
        /// </summary>
        [DataMember(Name="comprobanteAfectado", EmitDefaultValue=false)]
        public SummaryDocumentComprobanteAfectadoOutputModel ComprobanteAfectado { get; set; }

        /// <summary>
        /// Gets or Sets TipoOperacion
        /// </summary>
        [DataMember(Name="tipoOperacion", EmitDefaultValue=false)]
        public  TipoOperacion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SummaryDocumentLineOutputModel {\n");
            sb.Append("  Comprobante: ").Append(Comprobante).Append("\n");
            sb.Append("  ComprobanteAfectado: ").Append(ComprobanteAfectado).Append("\n");
            sb.Append("  TipoOperacion: ").Append(TipoOperacion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SummaryDocumentLineOutputModel);
        }

        /// <summary>
        /// Returns true if SummaryDocumentLineOutputModel instances are equal
        /// </summary>
        /// <param name="input">Instance of SummaryDocumentLineOutputModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SummaryDocumentLineOutputModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Comprobante == input.Comprobante ||
                    (this.Comprobante != null &&
                    this.Comprobante.Equals(input.Comprobante))
                ) && 
                (
                    this.ComprobanteAfectado == input.ComprobanteAfectado ||
                    (this.ComprobanteAfectado != null &&
                    this.ComprobanteAfectado.Equals(input.ComprobanteAfectado))
                ) && 
                (
                    this.TipoOperacion == input.TipoOperacion ||
                    (this.TipoOperacion != null &&
                    this.TipoOperacion.Equals(input.TipoOperacion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Comprobante != null)
                    hashCode = hashCode * 59 + this.Comprobante.GetHashCode();
                if (this.ComprobanteAfectado != null)
                    hashCode = hashCode * 59 + this.ComprobanteAfectado.GetHashCode();
                if (this.TipoOperacion != null)
                    hashCode = hashCode * 59 + this.TipoOperacion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
