/* 
 * XML Builder API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0.Final
 * Contact: projectopenubl+subscribe@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DocumentLineImpuestosOutputModel
    /// </summary>
    [DataContract]
        public partial class DocumentLineImpuestosOutputModel :  IEquatable<DocumentLineImpuestosOutputModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentLineImpuestosOutputModel" /> class.
        /// </summary>
        /// <param name="icb">icb.</param>
        /// <param name="igv">igv (required).</param>
        /// <param name="importeTotal">importeTotal (required).</param>
        public DocumentLineImpuestosOutputModel(ImpuestoDetalladoICBOutputModel icb = default(ImpuestoDetalladoICBOutputModel),  igv = default(),  importeTotal = default())
        {
            // to ensure "igv" is required (not null)
            if (igv == null)
            {
                throw new InvalidDataException("igv is a required property for DocumentLineImpuestosOutputModel and cannot be null");
            }
            else
            {
                this.Igv = igv;
            }
            // to ensure "importeTotal" is required (not null)
            if (importeTotal == null)
            {
                throw new InvalidDataException("importeTotal is a required property for DocumentLineImpuestosOutputModel and cannot be null");
            }
            else
            {
                this.ImporteTotal = importeTotal;
            }
            this.Icb = icb;
        }
        
        /// <summary>
        /// Gets or Sets Icb
        /// </summary>
        [DataMember(Name="icb", EmitDefaultValue=false)]
        public ImpuestoDetalladoICBOutputModel Icb { get; set; }

        /// <summary>
        /// Gets or Sets Igv
        /// </summary>
        [DataMember(Name="igv", EmitDefaultValue=false)]
        public  Igv { get; set; }

        /// <summary>
        /// Gets or Sets ImporteTotal
        /// </summary>
        [DataMember(Name="importeTotal", EmitDefaultValue=false)]
        public  ImporteTotal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentLineImpuestosOutputModel {\n");
            sb.Append("  Icb: ").Append(Icb).Append("\n");
            sb.Append("  Igv: ").Append(Igv).Append("\n");
            sb.Append("  ImporteTotal: ").Append(ImporteTotal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentLineImpuestosOutputModel);
        }

        /// <summary>
        /// Returns true if DocumentLineImpuestosOutputModel instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentLineImpuestosOutputModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentLineImpuestosOutputModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Icb == input.Icb ||
                    (this.Icb != null &&
                    this.Icb.Equals(input.Icb))
                ) && 
                (
                    this.Igv == input.Igv ||
                    (this.Igv != null &&
                    this.Igv.Equals(input.Igv))
                ) && 
                (
                    this.ImporteTotal == input.ImporteTotal ||
                    (this.ImporteTotal != null &&
                    this.ImporteTotal.Equals(input.ImporteTotal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Icb != null)
                    hashCode = hashCode * 59 + this.Icb.GetHashCode();
                if (this.Igv != null)
                    hashCode = hashCode * 59 + this.Igv.GetHashCode();
                if (this.ImporteTotal != null)
                    hashCode = hashCode * 59 + this.ImporteTotal.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
