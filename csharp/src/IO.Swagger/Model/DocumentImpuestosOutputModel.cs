/* 
 * XML Builder API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0.Final
 * Contact: projectopenubl+subscribe@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DocumentImpuestosOutputModel
    /// </summary>
    [DataContract]
        public partial class DocumentImpuestosOutputModel :  IEquatable<DocumentImpuestosOutputModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentImpuestosOutputModel" /> class.
        /// </summary>
        /// <param name="exoneradas">exoneradas.</param>
        /// <param name="gratuitas">gratuitas.</param>
        /// <param name="gravadas">gravadas.</param>
        /// <param name="icb">icb.</param>
        /// <param name="importeTotal">importeTotal (required).</param>
        /// <param name="inafectas">inafectas.</param>
        /// <param name="ivap">ivap.</param>
        public DocumentImpuestosOutputModel(ImpuestoTotalOutputModel exoneradas = default(ImpuestoTotalOutputModel), ImpuestoTotalOutputModel gratuitas = default(ImpuestoTotalOutputModel), ImpuestoTotalOutputModel gravadas = default(ImpuestoTotalOutputModel), ImpuestoTotalICBOutputModel icb = default(ImpuestoTotalICBOutputModel),  importeTotal = default(), ImpuestoTotalOutputModel inafectas = default(ImpuestoTotalOutputModel), ImpuestoTotalOutputModel ivap = default(ImpuestoTotalOutputModel))
        {
            // to ensure "importeTotal" is required (not null)
            if (importeTotal == null)
            {
                throw new InvalidDataException("importeTotal is a required property for DocumentImpuestosOutputModel and cannot be null");
            }
            else
            {
                this.ImporteTotal = importeTotal;
            }
            this.Exoneradas = exoneradas;
            this.Gratuitas = gratuitas;
            this.Gravadas = gravadas;
            this.Icb = icb;
            this.Inafectas = inafectas;
            this.Ivap = ivap;
        }
        
        /// <summary>
        /// Gets or Sets Exoneradas
        /// </summary>
        [DataMember(Name="exoneradas", EmitDefaultValue=false)]
        public ImpuestoTotalOutputModel Exoneradas { get; set; }

        /// <summary>
        /// Gets or Sets Gratuitas
        /// </summary>
        [DataMember(Name="gratuitas", EmitDefaultValue=false)]
        public ImpuestoTotalOutputModel Gratuitas { get; set; }

        /// <summary>
        /// Gets or Sets Gravadas
        /// </summary>
        [DataMember(Name="gravadas", EmitDefaultValue=false)]
        public ImpuestoTotalOutputModel Gravadas { get; set; }

        /// <summary>
        /// Gets or Sets Icb
        /// </summary>
        [DataMember(Name="icb", EmitDefaultValue=false)]
        public ImpuestoTotalICBOutputModel Icb { get; set; }

        /// <summary>
        /// Gets or Sets ImporteTotal
        /// </summary>
        [DataMember(Name="importeTotal", EmitDefaultValue=false)]
        public  ImporteTotal { get; set; }

        /// <summary>
        /// Gets or Sets Inafectas
        /// </summary>
        [DataMember(Name="inafectas", EmitDefaultValue=false)]
        public ImpuestoTotalOutputModel Inafectas { get; set; }

        /// <summary>
        /// Gets or Sets Ivap
        /// </summary>
        [DataMember(Name="ivap", EmitDefaultValue=false)]
        public ImpuestoTotalOutputModel Ivap { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentImpuestosOutputModel {\n");
            sb.Append("  Exoneradas: ").Append(Exoneradas).Append("\n");
            sb.Append("  Gratuitas: ").Append(Gratuitas).Append("\n");
            sb.Append("  Gravadas: ").Append(Gravadas).Append("\n");
            sb.Append("  Icb: ").Append(Icb).Append("\n");
            sb.Append("  ImporteTotal: ").Append(ImporteTotal).Append("\n");
            sb.Append("  Inafectas: ").Append(Inafectas).Append("\n");
            sb.Append("  Ivap: ").Append(Ivap).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentImpuestosOutputModel);
        }

        /// <summary>
        /// Returns true if DocumentImpuestosOutputModel instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentImpuestosOutputModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentImpuestosOutputModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Exoneradas == input.Exoneradas ||
                    (this.Exoneradas != null &&
                    this.Exoneradas.Equals(input.Exoneradas))
                ) && 
                (
                    this.Gratuitas == input.Gratuitas ||
                    (this.Gratuitas != null &&
                    this.Gratuitas.Equals(input.Gratuitas))
                ) && 
                (
                    this.Gravadas == input.Gravadas ||
                    (this.Gravadas != null &&
                    this.Gravadas.Equals(input.Gravadas))
                ) && 
                (
                    this.Icb == input.Icb ||
                    (this.Icb != null &&
                    this.Icb.Equals(input.Icb))
                ) && 
                (
                    this.ImporteTotal == input.ImporteTotal ||
                    (this.ImporteTotal != null &&
                    this.ImporteTotal.Equals(input.ImporteTotal))
                ) && 
                (
                    this.Inafectas == input.Inafectas ||
                    (this.Inafectas != null &&
                    this.Inafectas.Equals(input.Inafectas))
                ) && 
                (
                    this.Ivap == input.Ivap ||
                    (this.Ivap != null &&
                    this.Ivap.Equals(input.Ivap))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Exoneradas != null)
                    hashCode = hashCode * 59 + this.Exoneradas.GetHashCode();
                if (this.Gratuitas != null)
                    hashCode = hashCode * 59 + this.Gratuitas.GetHashCode();
                if (this.Gravadas != null)
                    hashCode = hashCode * 59 + this.Gravadas.GetHashCode();
                if (this.Icb != null)
                    hashCode = hashCode * 59 + this.Icb.GetHashCode();
                if (this.ImporteTotal != null)
                    hashCode = hashCode * 59 + this.ImporteTotal.GetHashCode();
                if (this.Inafectas != null)
                    hashCode = hashCode * 59 + this.Inafectas.GetHashCode();
                if (this.Ivap != null)
                    hashCode = hashCode * 59 + this.Ivap.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
