/* 
 * XML Builder API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0.Final
 * Contact: projectopenubl+subscribe@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SummaryDocumentLineComprobante
    /// </summary>
    [DataContract]
        public partial class SummaryDocumentLineComprobante :  IEquatable<SummaryDocumentLineComprobante>, IValidatableObject
    {
        /// <summary>
        /// Catalog 01
        /// </summary>
        /// <value>Catalog 01</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TipoEnum
        {
            /// <summary>
            /// Enum FACTURA for value: FACTURA
            /// </summary>
            [EnumMember(Value = "FACTURA")]
            FACTURA = 1,
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            [EnumMember(Value = "01")]
            _01 = 2,
            /// <summary>
            /// Enum BOLETA for value: BOLETA
            /// </summary>
            [EnumMember(Value = "BOLETA")]
            BOLETA = 3,
            /// <summary>
            /// Enum _03 for value: 03
            /// </summary>
            [EnumMember(Value = "03")]
            _03 = 4,
            /// <summary>
            /// Enum NOTACREDITO for value: NOTA_CREDITO
            /// </summary>
            [EnumMember(Value = "NOTA_CREDITO")]
            NOTACREDITO = 5,
            /// <summary>
            /// Enum _07 for value: 07
            /// </summary>
            [EnumMember(Value = "07")]
            _07 = 6,
            /// <summary>
            /// Enum NOTADEBITO for value: NOTA_DEBITO
            /// </summary>
            [EnumMember(Value = "NOTA_DEBITO")]
            NOTADEBITO = 7,
            /// <summary>
            /// Enum _08 for value: 08
            /// </summary>
            [EnumMember(Value = "08")]
            _08 = 8        }
        /// <summary>
        /// Catalog 01
        /// </summary>
        /// <value>Catalog 01</value>
        [DataMember(Name="tipo", EmitDefaultValue=false)]
        public TipoEnum Tipo { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SummaryDocumentLineComprobante" /> class.
        /// </summary>
        /// <param name="cliente">cliente (required).</param>
        /// <param name="impuestos">impuestos (required).</param>
        /// <param name="serieNumero">serieNumero.</param>
        /// <param name="tipo">Catalog 01 (required).</param>
        /// <param name="valorVenta">valorVenta (required).</param>
        public SummaryDocumentLineComprobante( cliente = default(),  impuestos = default(), string serieNumero = default(string), TipoEnum tipo = default(TipoEnum),  valorVenta = default())
        {
            // to ensure "cliente" is required (not null)
            if (cliente == null)
            {
                throw new InvalidDataException("cliente is a required property for SummaryDocumentLineComprobante and cannot be null");
            }
            else
            {
                this.Cliente = cliente;
            }
            // to ensure "impuestos" is required (not null)
            if (impuestos == null)
            {
                throw new InvalidDataException("impuestos is a required property for SummaryDocumentLineComprobante and cannot be null");
            }
            else
            {
                this.Impuestos = impuestos;
            }
            // to ensure "tipo" is required (not null)
            if (tipo == null)
            {
                throw new InvalidDataException("tipo is a required property for SummaryDocumentLineComprobante and cannot be null");
            }
            else
            {
                this.Tipo = tipo;
            }
            // to ensure "valorVenta" is required (not null)
            if (valorVenta == null)
            {
                throw new InvalidDataException("valorVenta is a required property for SummaryDocumentLineComprobante and cannot be null");
            }
            else
            {
                this.ValorVenta = valorVenta;
            }
            this.SerieNumero = serieNumero;
        }
        
        /// <summary>
        /// Gets or Sets Cliente
        /// </summary>
        [DataMember(Name="cliente", EmitDefaultValue=false)]
        public  Cliente { get; set; }

        /// <summary>
        /// Gets or Sets Impuestos
        /// </summary>
        [DataMember(Name="impuestos", EmitDefaultValue=false)]
        public  Impuestos { get; set; }

        /// <summary>
        /// Gets or Sets SerieNumero
        /// </summary>
        [DataMember(Name="serieNumero", EmitDefaultValue=false)]
        public string SerieNumero { get; set; }


        /// <summary>
        /// Gets or Sets ValorVenta
        /// </summary>
        [DataMember(Name="valorVenta", EmitDefaultValue=false)]
        public  ValorVenta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SummaryDocumentLineComprobante {\n");
            sb.Append("  Cliente: ").Append(Cliente).Append("\n");
            sb.Append("  Impuestos: ").Append(Impuestos).Append("\n");
            sb.Append("  SerieNumero: ").Append(SerieNumero).Append("\n");
            sb.Append("  Tipo: ").Append(Tipo).Append("\n");
            sb.Append("  ValorVenta: ").Append(ValorVenta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SummaryDocumentLineComprobante);
        }

        /// <summary>
        /// Returns true if SummaryDocumentLineComprobante instances are equal
        /// </summary>
        /// <param name="input">Instance of SummaryDocumentLineComprobante to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SummaryDocumentLineComprobante input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Cliente == input.Cliente ||
                    (this.Cliente != null &&
                    this.Cliente.Equals(input.Cliente))
                ) && 
                (
                    this.Impuestos == input.Impuestos ||
                    (this.Impuestos != null &&
                    this.Impuestos.Equals(input.Impuestos))
                ) && 
                (
                    this.SerieNumero == input.SerieNumero ||
                    (this.SerieNumero != null &&
                    this.SerieNumero.Equals(input.SerieNumero))
                ) && 
                (
                    this.Tipo == input.Tipo ||
                    (this.Tipo != null &&
                    this.Tipo.Equals(input.Tipo))
                ) && 
                (
                    this.ValorVenta == input.ValorVenta ||
                    (this.ValorVenta != null &&
                    this.ValorVenta.Equals(input.ValorVenta))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cliente != null)
                    hashCode = hashCode * 59 + this.Cliente.GetHashCode();
                if (this.Impuestos != null)
                    hashCode = hashCode * 59 + this.Impuestos.GetHashCode();
                if (this.SerieNumero != null)
                    hashCode = hashCode * 59 + this.SerieNumero.GetHashCode();
                if (this.Tipo != null)
                    hashCode = hashCode * 59 + this.Tipo.GetHashCode();
                if (this.ValorVenta != null)
                    hashCode = hashCode * 59 + this.ValorVenta.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
