/* 
 * XML Builder API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0.Final
 * Contact: projectopenubl+subscribe@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DocumentMonetaryTotalOutputModel
    /// </summary>
    [DataContract]
        public partial class DocumentMonetaryTotalOutputModel :  IEquatable<DocumentMonetaryTotalOutputModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentMonetaryTotalOutputModel" /> class.
        /// </summary>
        /// <param name="importeTotal">importeTotal (required).</param>
        /// <param name="valorVentaConImpuestos">valorVentaConImpuestos (required).</param>
        /// <param name="valorVentaSinImpuestos">valorVentaSinImpuestos (required).</param>
        public DocumentMonetaryTotalOutputModel( importeTotal = default(),  valorVentaConImpuestos = default(),  valorVentaSinImpuestos = default())
        {
            // to ensure "importeTotal" is required (not null)
            if (importeTotal == null)
            {
                throw new InvalidDataException("importeTotal is a required property for DocumentMonetaryTotalOutputModel and cannot be null");
            }
            else
            {
                this.ImporteTotal = importeTotal;
            }
            // to ensure "valorVentaConImpuestos" is required (not null)
            if (valorVentaConImpuestos == null)
            {
                throw new InvalidDataException("valorVentaConImpuestos is a required property for DocumentMonetaryTotalOutputModel and cannot be null");
            }
            else
            {
                this.ValorVentaConImpuestos = valorVentaConImpuestos;
            }
            // to ensure "valorVentaSinImpuestos" is required (not null)
            if (valorVentaSinImpuestos == null)
            {
                throw new InvalidDataException("valorVentaSinImpuestos is a required property for DocumentMonetaryTotalOutputModel and cannot be null");
            }
            else
            {
                this.ValorVentaSinImpuestos = valorVentaSinImpuestos;
            }
        }
        
        /// <summary>
        /// Gets or Sets ImporteTotal
        /// </summary>
        [DataMember(Name="importeTotal", EmitDefaultValue=false)]
        public  ImporteTotal { get; set; }

        /// <summary>
        /// Gets or Sets ValorVentaConImpuestos
        /// </summary>
        [DataMember(Name="valorVentaConImpuestos", EmitDefaultValue=false)]
        public  ValorVentaConImpuestos { get; set; }

        /// <summary>
        /// Gets or Sets ValorVentaSinImpuestos
        /// </summary>
        [DataMember(Name="valorVentaSinImpuestos", EmitDefaultValue=false)]
        public  ValorVentaSinImpuestos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentMonetaryTotalOutputModel {\n");
            sb.Append("  ImporteTotal: ").Append(ImporteTotal).Append("\n");
            sb.Append("  ValorVentaConImpuestos: ").Append(ValorVentaConImpuestos).Append("\n");
            sb.Append("  ValorVentaSinImpuestos: ").Append(ValorVentaSinImpuestos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentMonetaryTotalOutputModel);
        }

        /// <summary>
        /// Returns true if DocumentMonetaryTotalOutputModel instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentMonetaryTotalOutputModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentMonetaryTotalOutputModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ImporteTotal == input.ImporteTotal ||
                    (this.ImporteTotal != null &&
                    this.ImporteTotal.Equals(input.ImporteTotal))
                ) && 
                (
                    this.ValorVentaConImpuestos == input.ValorVentaConImpuestos ||
                    (this.ValorVentaConImpuestos != null &&
                    this.ValorVentaConImpuestos.Equals(input.ValorVentaConImpuestos))
                ) && 
                (
                    this.ValorVentaSinImpuestos == input.ValorVentaSinImpuestos ||
                    (this.ValorVentaSinImpuestos != null &&
                    this.ValorVentaSinImpuestos.Equals(input.ValorVentaSinImpuestos))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ImporteTotal != null)
                    hashCode = hashCode * 59 + this.ImporteTotal.GetHashCode();
                if (this.ValorVentaConImpuestos != null)
                    hashCode = hashCode * 59 + this.ValorVentaConImpuestos.GetHashCode();
                if (this.ValorVentaSinImpuestos != null)
                    hashCode = hashCode * 59 + this.ValorVentaSinImpuestos.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
