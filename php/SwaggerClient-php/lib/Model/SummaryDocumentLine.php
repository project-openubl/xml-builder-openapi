<?php
/**
 * SummaryDocumentLine
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * XML Builder API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0.Final
 * Contact: projectopenubl+subscribe@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.18
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SummaryDocumentLine Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SummaryDocumentLine implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SummaryDocumentLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'comprobante' => '',
'comprobante_afectado' => '',
'tipo_operacion' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'comprobante' => null,
'comprobante_afectado' => null,
'tipo_operacion' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'comprobante' => 'comprobante',
'comprobante_afectado' => 'comprobanteAfectado',
'tipo_operacion' => 'tipoOperacion'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'comprobante' => 'setComprobante',
'comprobante_afectado' => 'setComprobanteAfectado',
'tipo_operacion' => 'setTipoOperacion'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'comprobante' => 'getComprobante',
'comprobante_afectado' => 'getComprobanteAfectado',
'tipo_operacion' => 'getTipoOperacion'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TIPO_OPERACION_ADICIONAR = 'ADICIONAR';
const TIPO_OPERACION__1 = '1';
const TIPO_OPERACION_MODIFICAR = 'MODIFICAR';
const TIPO_OPERACION__2 = '2';
const TIPO_OPERACION_ANULADO = 'ANULADO';
const TIPO_OPERACION__3 = '3';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTipoOperacionAllowableValues()
    {
        return [
            self::TIPO_OPERACION_ADICIONAR,
self::TIPO_OPERACION__1,
self::TIPO_OPERACION_MODIFICAR,
self::TIPO_OPERACION__2,
self::TIPO_OPERACION_ANULADO,
self::TIPO_OPERACION__3,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['comprobante'] = isset($data['comprobante']) ? $data['comprobante'] : null;
        $this->container['comprobante_afectado'] = isset($data['comprobante_afectado']) ? $data['comprobante_afectado'] : null;
        $this->container['tipo_operacion'] = isset($data['tipo_operacion']) ? $data['tipo_operacion'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['comprobante'] === null) {
            $invalidProperties[] = "'comprobante' can't be null";
        }
        if ($this->container['tipo_operacion'] === null) {
            $invalidProperties[] = "'tipo_operacion' can't be null";
        }
        $allowedValues = $this->getTipoOperacionAllowableValues();
        if (!is_null($this->container['tipo_operacion']) && !in_array($this->container['tipo_operacion'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tipo_operacion', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets comprobante
     *
     * @return 
     */
    public function getComprobante()
    {
        return $this->container['comprobante'];
    }

    /**
     * Sets comprobante
     *
     * @param  $comprobante comprobante
     *
     * @return $this
     */
    public function setComprobante($comprobante)
    {
        $this->container['comprobante'] = $comprobante;

        return $this;
    }

    /**
     * Gets comprobante_afectado
     *
     * @return 
     */
    public function getComprobanteAfectado()
    {
        return $this->container['comprobante_afectado'];
    }

    /**
     * Sets comprobante_afectado
     *
     * @param  $comprobante_afectado comprobante_afectado
     *
     * @return $this
     */
    public function setComprobanteAfectado($comprobante_afectado)
    {
        $this->container['comprobante_afectado'] = $comprobante_afectado;

        return $this;
    }

    /**
     * Gets tipo_operacion
     *
     * @return string
     */
    public function getTipoOperacion()
    {
        return $this->container['tipo_operacion'];
    }

    /**
     * Sets tipo_operacion
     *
     * @param string $tipo_operacion Catalogo 19
     *
     * @return $this
     */
    public function setTipoOperacion($tipo_operacion)
    {
        $allowedValues = $this->getTipoOperacionAllowableValues();
        if (!in_array($tipo_operacion, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tipo_operacion', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tipo_operacion'] = $tipo_operacion;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
