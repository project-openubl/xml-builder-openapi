<?php
/**
 * Proveedor
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * XML Builder API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0.Final
 * Contact: projectopenubl+subscribe@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.18
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Proveedor Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Proveedor implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Proveedor';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'contacto' => '\Swagger\Client\Model\Contacto',
'direccion' => '\Swagger\Client\Model\Direccion',
'nombre_comercial' => 'string',
'razon_social' => 'string',
'ruc' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'contacto' => null,
'direccion' => null,
'nombre_comercial' => null,
'razon_social' => null,
'ruc' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contacto' => 'contacto',
'direccion' => 'direccion',
'nombre_comercial' => 'nombreComercial',
'razon_social' => 'razonSocial',
'ruc' => 'ruc'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contacto' => 'setContacto',
'direccion' => 'setDireccion',
'nombre_comercial' => 'setNombreComercial',
'razon_social' => 'setRazonSocial',
'ruc' => 'setRuc'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contacto' => 'getContacto',
'direccion' => 'getDireccion',
'nombre_comercial' => 'getNombreComercial',
'razon_social' => 'getRazonSocial',
'ruc' => 'getRuc'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contacto'] = isset($data['contacto']) ? $data['contacto'] : null;
        $this->container['direccion'] = isset($data['direccion']) ? $data['direccion'] : null;
        $this->container['nombre_comercial'] = isset($data['nombre_comercial']) ? $data['nombre_comercial'] : null;
        $this->container['razon_social'] = isset($data['razon_social']) ? $data['razon_social'] : null;
        $this->container['ruc'] = isset($data['ruc']) ? $data['ruc'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['razon_social'] === null) {
            $invalidProperties[] = "'razon_social' can't be null";
        }
        if ($this->container['ruc'] === null) {
            $invalidProperties[] = "'ruc' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contacto
     *
     * @return \Swagger\Client\Model\Contacto
     */
    public function getContacto()
    {
        return $this->container['contacto'];
    }

    /**
     * Sets contacto
     *
     * @param \Swagger\Client\Model\Contacto $contacto contacto
     *
     * @return $this
     */
    public function setContacto($contacto)
    {
        $this->container['contacto'] = $contacto;

        return $this;
    }

    /**
     * Gets direccion
     *
     * @return \Swagger\Client\Model\Direccion
     */
    public function getDireccion()
    {
        return $this->container['direccion'];
    }

    /**
     * Sets direccion
     *
     * @param \Swagger\Client\Model\Direccion $direccion direccion
     *
     * @return $this
     */
    public function setDireccion($direccion)
    {
        $this->container['direccion'] = $direccion;

        return $this;
    }

    /**
     * Gets nombre_comercial
     *
     * @return string
     */
    public function getNombreComercial()
    {
        return $this->container['nombre_comercial'];
    }

    /**
     * Sets nombre_comercial
     *
     * @param string $nombre_comercial nombre_comercial
     *
     * @return $this
     */
    public function setNombreComercial($nombre_comercial)
    {
        $this->container['nombre_comercial'] = $nombre_comercial;

        return $this;
    }

    /**
     * Gets razon_social
     *
     * @return string
     */
    public function getRazonSocial()
    {
        return $this->container['razon_social'];
    }

    /**
     * Sets razon_social
     *
     * @param string $razon_social razon_social
     *
     * @return $this
     */
    public function setRazonSocial($razon_social)
    {
        $this->container['razon_social'] = $razon_social;

        return $this;
    }

    /**
     * Gets ruc
     *
     * @return string
     */
    public function getRuc()
    {
        return $this->container['ruc'];
    }

    /**
     * Sets ruc
     *
     * @param string $ruc ruc
     *
     * @return $this
     */
    public function setRuc($ruc)
    {
        $this->container['ruc'] = $ruc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
