<?php
/**
 * SummaryDocumentLineComprobanteValorVenta
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * XML Builder API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0.Final
 * Contact: projectopenubl+subscribe@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.18
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SummaryDocumentLineComprobanteValorVenta Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SummaryDocumentLineComprobanteValorVenta implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SummaryDocumentLineComprobanteValorVenta';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'exonerado' => '',
'gratuito' => '',
'gravado' => '',
'importe_total' => '',
'inafecto' => '',
'otros_cargos' => ''    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'exonerado' => null,
'gratuito' => null,
'gravado' => null,
'importe_total' => null,
'inafecto' => null,
'otros_cargos' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'exonerado' => 'exonerado',
'gratuito' => 'gratuito',
'gravado' => 'gravado',
'importe_total' => 'importeTotal',
'inafecto' => 'inafecto',
'otros_cargos' => 'otrosCargos'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'exonerado' => 'setExonerado',
'gratuito' => 'setGratuito',
'gravado' => 'setGravado',
'importe_total' => 'setImporteTotal',
'inafecto' => 'setInafecto',
'otros_cargos' => 'setOtrosCargos'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'exonerado' => 'getExonerado',
'gratuito' => 'getGratuito',
'gravado' => 'getGravado',
'importe_total' => 'getImporteTotal',
'inafecto' => 'getInafecto',
'otros_cargos' => 'getOtrosCargos'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['exonerado'] = isset($data['exonerado']) ? $data['exonerado'] : null;
        $this->container['gratuito'] = isset($data['gratuito']) ? $data['gratuito'] : null;
        $this->container['gravado'] = isset($data['gravado']) ? $data['gravado'] : null;
        $this->container['importe_total'] = isset($data['importe_total']) ? $data['importe_total'] : null;
        $this->container['inafecto'] = isset($data['inafecto']) ? $data['inafecto'] : null;
        $this->container['otros_cargos'] = isset($data['otros_cargos']) ? $data['otros_cargos'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['importe_total'] === null) {
            $invalidProperties[] = "'importe_total' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets exonerado
     *
     * @return 
     */
    public function getExonerado()
    {
        return $this->container['exonerado'];
    }

    /**
     * Sets exonerado
     *
     * @param  $exonerado exonerado
     *
     * @return $this
     */
    public function setExonerado($exonerado)
    {
        $this->container['exonerado'] = $exonerado;

        return $this;
    }

    /**
     * Gets gratuito
     *
     * @return 
     */
    public function getGratuito()
    {
        return $this->container['gratuito'];
    }

    /**
     * Sets gratuito
     *
     * @param  $gratuito gratuito
     *
     * @return $this
     */
    public function setGratuito($gratuito)
    {
        $this->container['gratuito'] = $gratuito;

        return $this;
    }

    /**
     * Gets gravado
     *
     * @return 
     */
    public function getGravado()
    {
        return $this->container['gravado'];
    }

    /**
     * Sets gravado
     *
     * @param  $gravado gravado
     *
     * @return $this
     */
    public function setGravado($gravado)
    {
        $this->container['gravado'] = $gravado;

        return $this;
    }

    /**
     * Gets importe_total
     *
     * @return 
     */
    public function getImporteTotal()
    {
        return $this->container['importe_total'];
    }

    /**
     * Sets importe_total
     *
     * @param  $importe_total importe_total
     *
     * @return $this
     */
    public function setImporteTotal($importe_total)
    {
        $this->container['importe_total'] = $importe_total;

        return $this;
    }

    /**
     * Gets inafecto
     *
     * @return 
     */
    public function getInafecto()
    {
        return $this->container['inafecto'];
    }

    /**
     * Sets inafecto
     *
     * @param  $inafecto inafecto
     *
     * @return $this
     */
    public function setInafecto($inafecto)
    {
        $this->container['inafecto'] = $inafecto;

        return $this;
    }

    /**
     * Gets otros_cargos
     *
     * @return 
     */
    public function getOtrosCargos()
    {
        return $this->container['otros_cargos'];
    }

    /**
     * Sets otros_cargos
     *
     * @param  $otros_cargos otros_cargos
     *
     * @return $this
     */
    public function setOtrosCargos($otros_cargos)
    {
        $this->container['otros_cargos'] = $otros_cargos;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
