<?php
/**
 * DocumentLine
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * XML Builder API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0.Final
 * Contact: projectopenubl+subscribe@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.18
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DocumentLine Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentLine implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DocumentLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cantidad' => '',
'descripcion' => 'string',
'icb' => 'bool',
'precio_con_igv' => '',
'precio_unitario' => '',
'tipo_igv' => 'string',
'unidad_medida' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cantidad' => null,
'descripcion' => null,
'icb' => null,
'precio_con_igv' => null,
'precio_unitario' => null,
'tipo_igv' => null,
'unidad_medida' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cantidad' => 'cantidad',
'descripcion' => 'descripcion',
'icb' => 'icb',
'precio_con_igv' => 'precioConIgv',
'precio_unitario' => 'precioUnitario',
'tipo_igv' => 'tipoIgv',
'unidad_medida' => 'unidadMedida'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cantidad' => 'setCantidad',
'descripcion' => 'setDescripcion',
'icb' => 'setIcb',
'precio_con_igv' => 'setPrecioConIgv',
'precio_unitario' => 'setPrecioUnitario',
'tipo_igv' => 'setTipoIgv',
'unidad_medida' => 'setUnidadMedida'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cantidad' => 'getCantidad',
'descripcion' => 'getDescripcion',
'icb' => 'getIcb',
'precio_con_igv' => 'getPrecioConIgv',
'precio_unitario' => 'getPrecioUnitario',
'tipo_igv' => 'getTipoIgv',
'unidad_medida' => 'getUnidadMedida'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TIPO_IGV_GRAVADO_OPERACION_ONEROSA = 'GRAVADO_OPERACION_ONEROSA';
const TIPO_IGV__10 = '10';
const TIPO_IGV_GRAVADO_RETIRO_POR_PREMIO = 'GRAVADO_RETIRO_POR_PREMIO';
const TIPO_IGV__11 = '11';
const TIPO_IGV_GRAVADO_RETIRO_POR_DONACION = 'GRAVADO_RETIRO_POR_DONACION';
const TIPO_IGV__12 = '12';
const TIPO_IGV_GRAVADO_RETIRO = 'GRAVADO_RETIRO';
const TIPO_IGV__13 = '13';
const TIPO_IGV_GRAVADO_RETIRO_POR_PUBLICIDAD = 'GRAVADO_RETIRO_POR_PUBLICIDAD';
const TIPO_IGV__14 = '14';
const TIPO_IGV_GRAVADO_BONIFICACIONES = 'GRAVADO_BONIFICACIONES';
const TIPO_IGV__15 = '15';
const TIPO_IGV_GRAVADO_RETIRO_POR_ENTREGA_A_TRABAJADORES = 'GRAVADO_RETIRO_POR_ENTREGA_A_TRABAJADORES';
const TIPO_IGV__16 = '16';
const TIPO_IGV_GRAVADO_IVAP = 'GRAVADO_IVAP';
const TIPO_IGV__17 = '17';
const TIPO_IGV_EXONERADO_OPERACION_ONEROSA = 'EXONERADO_OPERACION_ONEROSA';
const TIPO_IGV__20 = '20';
const TIPO_IGV_EXONERADO_TRANSFERENCIA_GRATUITA = 'EXONERADO_TRANSFERENCIA_GRATUITA';
const TIPO_IGV__21 = '21';
const TIPO_IGV_INAFECTO_OPERACION_ONEROSA = 'INAFECTO_OPERACION_ONEROSA';
const TIPO_IGV__30 = '30';
const TIPO_IGV_INAFECTO_RETIRO_POR_BONIFICACION = 'INAFECTO_RETIRO_POR_BONIFICACION';
const TIPO_IGV__31 = '31';
const TIPO_IGV_INAFECTO_RETIRO = 'INAFECTO_RETIRO';
const TIPO_IGV__32 = '32';
const TIPO_IGV_INAFECTO_RETIRO_POR_MUESTRAS_MEDICAS = 'INAFECTO_RETIRO_POR_MUESTRAS_MEDICAS';
const TIPO_IGV__33 = '33';
const TIPO_IGV_INAFECTO_RETIRO_POR_CONVENIO_COLECTIVO = 'INAFECTO_RETIRO_POR_CONVENIO_COLECTIVO';
const TIPO_IGV__34 = '34';
const TIPO_IGV_INAFECTO_RETIRO_POR_PREMIO = 'INAFECTO_RETIRO_POR_PREMIO';
const TIPO_IGV__35 = '35';
const TIPO_IGV_INAFECTO_RETIRO_POR_PUBLICIDAD = 'INAFECTO_RETIRO_POR_PUBLICIDAD';
const TIPO_IGV__36 = '36';
const TIPO_IGV_EXPORTACION = 'EXPORTACION';
const TIPO_IGV__40 = '40';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTipoIgvAllowableValues()
    {
        return [
            self::TIPO_IGV_GRAVADO_OPERACION_ONEROSA,
self::TIPO_IGV__10,
self::TIPO_IGV_GRAVADO_RETIRO_POR_PREMIO,
self::TIPO_IGV__11,
self::TIPO_IGV_GRAVADO_RETIRO_POR_DONACION,
self::TIPO_IGV__12,
self::TIPO_IGV_GRAVADO_RETIRO,
self::TIPO_IGV__13,
self::TIPO_IGV_GRAVADO_RETIRO_POR_PUBLICIDAD,
self::TIPO_IGV__14,
self::TIPO_IGV_GRAVADO_BONIFICACIONES,
self::TIPO_IGV__15,
self::TIPO_IGV_GRAVADO_RETIRO_POR_ENTREGA_A_TRABAJADORES,
self::TIPO_IGV__16,
self::TIPO_IGV_GRAVADO_IVAP,
self::TIPO_IGV__17,
self::TIPO_IGV_EXONERADO_OPERACION_ONEROSA,
self::TIPO_IGV__20,
self::TIPO_IGV_EXONERADO_TRANSFERENCIA_GRATUITA,
self::TIPO_IGV__21,
self::TIPO_IGV_INAFECTO_OPERACION_ONEROSA,
self::TIPO_IGV__30,
self::TIPO_IGV_INAFECTO_RETIRO_POR_BONIFICACION,
self::TIPO_IGV__31,
self::TIPO_IGV_INAFECTO_RETIRO,
self::TIPO_IGV__32,
self::TIPO_IGV_INAFECTO_RETIRO_POR_MUESTRAS_MEDICAS,
self::TIPO_IGV__33,
self::TIPO_IGV_INAFECTO_RETIRO_POR_CONVENIO_COLECTIVO,
self::TIPO_IGV__34,
self::TIPO_IGV_INAFECTO_RETIRO_POR_PREMIO,
self::TIPO_IGV__35,
self::TIPO_IGV_INAFECTO_RETIRO_POR_PUBLICIDAD,
self::TIPO_IGV__36,
self::TIPO_IGV_EXPORTACION,
self::TIPO_IGV__40,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cantidad'] = isset($data['cantidad']) ? $data['cantidad'] : null;
        $this->container['descripcion'] = isset($data['descripcion']) ? $data['descripcion'] : null;
        $this->container['icb'] = isset($data['icb']) ? $data['icb'] : null;
        $this->container['precio_con_igv'] = isset($data['precio_con_igv']) ? $data['precio_con_igv'] : null;
        $this->container['precio_unitario'] = isset($data['precio_unitario']) ? $data['precio_unitario'] : null;
        $this->container['tipo_igv'] = isset($data['tipo_igv']) ? $data['tipo_igv'] : null;
        $this->container['unidad_medida'] = isset($data['unidad_medida']) ? $data['unidad_medida'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cantidad'] === null) {
            $invalidProperties[] = "'cantidad' can't be null";
        }
        if ($this->container['descripcion'] === null) {
            $invalidProperties[] = "'descripcion' can't be null";
        }
        $allowedValues = $this->getTipoIgvAllowableValues();
        if (!is_null($this->container['tipo_igv']) && !in_array($this->container['tipo_igv'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tipo_igv', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cantidad
     *
     * @return 
     */
    public function getCantidad()
    {
        return $this->container['cantidad'];
    }

    /**
     * Sets cantidad
     *
     * @param  $cantidad cantidad
     *
     * @return $this
     */
    public function setCantidad($cantidad)
    {
        $this->container['cantidad'] = $cantidad;

        return $this;
    }

    /**
     * Gets descripcion
     *
     * @return string
     */
    public function getDescripcion()
    {
        return $this->container['descripcion'];
    }

    /**
     * Sets descripcion
     *
     * @param string $descripcion Descripción del producto/servicio
     *
     * @return $this
     */
    public function setDescripcion($descripcion)
    {
        $this->container['descripcion'] = $descripcion;

        return $this;
    }

    /**
     * Gets icb
     *
     * @return bool
     */
    public function getIcb()
    {
        return $this->container['icb'];
    }

    /**
     * Sets icb
     *
     * @param bool $icb True si el producto está afecto al impuesto ICB_PE
     *
     * @return $this
     */
    public function setIcb($icb)
    {
        $this->container['icb'] = $icb;

        return $this;
    }

    /**
     * Gets precio_con_igv
     *
     * @return 
     */
    public function getPrecioConIgv()
    {
        return $this->container['precio_con_igv'];
    }

    /**
     * Sets precio_con_igv
     *
     * @param  $precio_con_igv precio_con_igv
     *
     * @return $this
     */
    public function setPrecioConIgv($precio_con_igv)
    {
        $this->container['precio_con_igv'] = $precio_con_igv;

        return $this;
    }

    /**
     * Gets precio_unitario
     *
     * @return 
     */
    public function getPrecioUnitario()
    {
        return $this->container['precio_unitario'];
    }

    /**
     * Sets precio_unitario
     *
     * @param  $precio_unitario precio_unitario
     *
     * @return $this
     */
    public function setPrecioUnitario($precio_unitario)
    {
        $this->container['precio_unitario'] = $precio_unitario;

        return $this;
    }

    /**
     * Gets tipo_igv
     *
     * @return string
     */
    public function getTipoIgv()
    {
        return $this->container['tipo_igv'];
    }

    /**
     * Sets tipo_igv
     *
     * @param string $tipo_igv Catalogo 07
     *
     * @return $this
     */
    public function setTipoIgv($tipo_igv)
    {
        $allowedValues = $this->getTipoIgvAllowableValues();
        if (!is_null($tipo_igv) && !in_array($tipo_igv, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tipo_igv', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tipo_igv'] = $tipo_igv;

        return $this;
    }

    /**
     * Gets unidad_medida
     *
     * @return string
     */
    public function getUnidadMedida()
    {
        return $this->container['unidad_medida'];
    }

    /**
     * Sets unidad_medida
     *
     * @param string $unidad_medida unidad_medida
     *
     * @return $this
     */
    public function setUnidadMedida($unidad_medida)
    {
        $this->container['unidad_medida'] = $unidad_medida;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
