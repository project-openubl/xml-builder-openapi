<?php
/**
 * ImpuestoDetalladoIGVOutputModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * XML Builder API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0.Final
 * Contact: projectopenubl+subscribe@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.18
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ImpuestoDetalladoIGVOutputModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ImpuestoDetalladoIGVOutputModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ImpuestoDetalladoIGVOutputModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'categoria' => '',
'importe' => '',
'base_imponible' => '',
'porcentaje' => '',
'tipo' => ''    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'categoria' => null,
'importe' => null,
'base_imponible' => null,
'porcentaje' => null,
'tipo' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'categoria' => 'categoria',
'importe' => 'importe',
'base_imponible' => 'baseImponible',
'porcentaje' => 'porcentaje',
'tipo' => 'tipo'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'categoria' => 'setCategoria',
'importe' => 'setImporte',
'base_imponible' => 'setBaseImponible',
'porcentaje' => 'setPorcentaje',
'tipo' => 'setTipo'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'categoria' => 'getCategoria',
'importe' => 'getImporte',
'base_imponible' => 'getBaseImponible',
'porcentaje' => 'getPorcentaje',
'tipo' => 'getTipo'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['categoria'] = isset($data['categoria']) ? $data['categoria'] : null;
        $this->container['importe'] = isset($data['importe']) ? $data['importe'] : null;
        $this->container['base_imponible'] = isset($data['base_imponible']) ? $data['base_imponible'] : null;
        $this->container['porcentaje'] = isset($data['porcentaje']) ? $data['porcentaje'] : null;
        $this->container['tipo'] = isset($data['tipo']) ? $data['tipo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['categoria'] === null) {
            $invalidProperties[] = "'categoria' can't be null";
        }
        if ($this->container['importe'] === null) {
            $invalidProperties[] = "'importe' can't be null";
        }
        if ($this->container['base_imponible'] === null) {
            $invalidProperties[] = "'base_imponible' can't be null";
        }
        if ($this->container['porcentaje'] === null) {
            $invalidProperties[] = "'porcentaje' can't be null";
        }
        if ($this->container['tipo'] === null) {
            $invalidProperties[] = "'tipo' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets categoria
     *
     * @return 
     */
    public function getCategoria()
    {
        return $this->container['categoria'];
    }

    /**
     * Sets categoria
     *
     * @param  $categoria categoria
     *
     * @return $this
     */
    public function setCategoria($categoria)
    {
        $this->container['categoria'] = $categoria;

        return $this;
    }

    /**
     * Gets importe
     *
     * @return 
     */
    public function getImporte()
    {
        return $this->container['importe'];
    }

    /**
     * Sets importe
     *
     * @param  $importe importe
     *
     * @return $this
     */
    public function setImporte($importe)
    {
        $this->container['importe'] = $importe;

        return $this;
    }

    /**
     * Gets base_imponible
     *
     * @return 
     */
    public function getBaseImponible()
    {
        return $this->container['base_imponible'];
    }

    /**
     * Sets base_imponible
     *
     * @param  $base_imponible base_imponible
     *
     * @return $this
     */
    public function setBaseImponible($base_imponible)
    {
        $this->container['base_imponible'] = $base_imponible;

        return $this;
    }

    /**
     * Gets porcentaje
     *
     * @return 
     */
    public function getPorcentaje()
    {
        return $this->container['porcentaje'];
    }

    /**
     * Sets porcentaje
     *
     * @param  $porcentaje porcentaje
     *
     * @return $this
     */
    public function setPorcentaje($porcentaje)
    {
        $this->container['porcentaje'] = $porcentaje;

        return $this;
    }

    /**
     * Gets tipo
     *
     * @return 
     */
    public function getTipo()
    {
        return $this->container['tipo'];
    }

    /**
     * Sets tipo
     *
     * @param  $tipo tipo
     *
     * @return $this
     */
    public function setTipo($tipo)
    {
        $this->container['tipo'] = $tipo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
