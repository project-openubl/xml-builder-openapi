<?php
/**
 * DocumentImpuestosOutputModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * XML Builder API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0.Final
 * Contact: projectopenubl+subscribe@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.18
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DocumentImpuestosOutputModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentImpuestosOutputModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DocumentImpuestosOutputModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'exoneradas' => '\Swagger\Client\Model\ImpuestoTotalOutputModel',
'gratuitas' => '\Swagger\Client\Model\ImpuestoTotalOutputModel',
'gravadas' => '\Swagger\Client\Model\ImpuestoTotalOutputModel',
'icb' => '\Swagger\Client\Model\ImpuestoTotalICBOutputModel',
'importe_total' => '',
'inafectas' => '\Swagger\Client\Model\ImpuestoTotalOutputModel',
'ivap' => '\Swagger\Client\Model\ImpuestoTotalOutputModel'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'exoneradas' => null,
'gratuitas' => null,
'gravadas' => null,
'icb' => null,
'importe_total' => null,
'inafectas' => null,
'ivap' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'exoneradas' => 'exoneradas',
'gratuitas' => 'gratuitas',
'gravadas' => 'gravadas',
'icb' => 'icb',
'importe_total' => 'importeTotal',
'inafectas' => 'inafectas',
'ivap' => 'ivap'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'exoneradas' => 'setExoneradas',
'gratuitas' => 'setGratuitas',
'gravadas' => 'setGravadas',
'icb' => 'setIcb',
'importe_total' => 'setImporteTotal',
'inafectas' => 'setInafectas',
'ivap' => 'setIvap'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'exoneradas' => 'getExoneradas',
'gratuitas' => 'getGratuitas',
'gravadas' => 'getGravadas',
'icb' => 'getIcb',
'importe_total' => 'getImporteTotal',
'inafectas' => 'getInafectas',
'ivap' => 'getIvap'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['exoneradas'] = isset($data['exoneradas']) ? $data['exoneradas'] : null;
        $this->container['gratuitas'] = isset($data['gratuitas']) ? $data['gratuitas'] : null;
        $this->container['gravadas'] = isset($data['gravadas']) ? $data['gravadas'] : null;
        $this->container['icb'] = isset($data['icb']) ? $data['icb'] : null;
        $this->container['importe_total'] = isset($data['importe_total']) ? $data['importe_total'] : null;
        $this->container['inafectas'] = isset($data['inafectas']) ? $data['inafectas'] : null;
        $this->container['ivap'] = isset($data['ivap']) ? $data['ivap'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['importe_total'] === null) {
            $invalidProperties[] = "'importe_total' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets exoneradas
     *
     * @return \Swagger\Client\Model\ImpuestoTotalOutputModel
     */
    public function getExoneradas()
    {
        return $this->container['exoneradas'];
    }

    /**
     * Sets exoneradas
     *
     * @param \Swagger\Client\Model\ImpuestoTotalOutputModel $exoneradas exoneradas
     *
     * @return $this
     */
    public function setExoneradas($exoneradas)
    {
        $this->container['exoneradas'] = $exoneradas;

        return $this;
    }

    /**
     * Gets gratuitas
     *
     * @return \Swagger\Client\Model\ImpuestoTotalOutputModel
     */
    public function getGratuitas()
    {
        return $this->container['gratuitas'];
    }

    /**
     * Sets gratuitas
     *
     * @param \Swagger\Client\Model\ImpuestoTotalOutputModel $gratuitas gratuitas
     *
     * @return $this
     */
    public function setGratuitas($gratuitas)
    {
        $this->container['gratuitas'] = $gratuitas;

        return $this;
    }

    /**
     * Gets gravadas
     *
     * @return \Swagger\Client\Model\ImpuestoTotalOutputModel
     */
    public function getGravadas()
    {
        return $this->container['gravadas'];
    }

    /**
     * Sets gravadas
     *
     * @param \Swagger\Client\Model\ImpuestoTotalOutputModel $gravadas gravadas
     *
     * @return $this
     */
    public function setGravadas($gravadas)
    {
        $this->container['gravadas'] = $gravadas;

        return $this;
    }

    /**
     * Gets icb
     *
     * @return \Swagger\Client\Model\ImpuestoTotalICBOutputModel
     */
    public function getIcb()
    {
        return $this->container['icb'];
    }

    /**
     * Sets icb
     *
     * @param \Swagger\Client\Model\ImpuestoTotalICBOutputModel $icb icb
     *
     * @return $this
     */
    public function setIcb($icb)
    {
        $this->container['icb'] = $icb;

        return $this;
    }

    /**
     * Gets importe_total
     *
     * @return 
     */
    public function getImporteTotal()
    {
        return $this->container['importe_total'];
    }

    /**
     * Sets importe_total
     *
     * @param  $importe_total importe_total
     *
     * @return $this
     */
    public function setImporteTotal($importe_total)
    {
        $this->container['importe_total'] = $importe_total;

        return $this;
    }

    /**
     * Gets inafectas
     *
     * @return \Swagger\Client\Model\ImpuestoTotalOutputModel
     */
    public function getInafectas()
    {
        return $this->container['inafectas'];
    }

    /**
     * Sets inafectas
     *
     * @param \Swagger\Client\Model\ImpuestoTotalOutputModel $inafectas inafectas
     *
     * @return $this
     */
    public function setInafectas($inafectas)
    {
        $this->container['inafectas'] = $inafectas;

        return $this;
    }

    /**
     * Gets ivap
     *
     * @return \Swagger\Client\Model\ImpuestoTotalOutputModel
     */
    public function getIvap()
    {
        return $this->container['ivap'];
    }

    /**
     * Sets ivap
     *
     * @param \Swagger\Client\Model\ImpuestoTotalOutputModel $ivap ivap
     *
     * @return $this
     */
    public function setIvap($ivap)
    {
        $this->container['ivap'] = $ivap;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
