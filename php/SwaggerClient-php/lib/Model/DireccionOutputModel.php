<?php
/**
 * DireccionOutputModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * XML Builder API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0.Final
 * Contact: projectopenubl+subscribe@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.18
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DireccionOutputModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DireccionOutputModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DireccionOutputModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'codigo_local' => 'string',
'codigo_pais' => 'string',
'departamento' => 'string',
'direccion' => 'string',
'distrito' => 'string',
'provincia' => 'string',
'ubigeo' => 'string',
'urbanizacion' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'codigo_local' => null,
'codigo_pais' => null,
'departamento' => null,
'direccion' => null,
'distrito' => null,
'provincia' => null,
'ubigeo' => null,
'urbanizacion' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'codigo_local' => 'codigoLocal',
'codigo_pais' => 'codigoPais',
'departamento' => 'departamento',
'direccion' => 'direccion',
'distrito' => 'distrito',
'provincia' => 'provincia',
'ubigeo' => 'ubigeo',
'urbanizacion' => 'urbanizacion'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'codigo_local' => 'setCodigoLocal',
'codigo_pais' => 'setCodigoPais',
'departamento' => 'setDepartamento',
'direccion' => 'setDireccion',
'distrito' => 'setDistrito',
'provincia' => 'setProvincia',
'ubigeo' => 'setUbigeo',
'urbanizacion' => 'setUrbanizacion'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'codigo_local' => 'getCodigoLocal',
'codigo_pais' => 'getCodigoPais',
'departamento' => 'getDepartamento',
'direccion' => 'getDireccion',
'distrito' => 'getDistrito',
'provincia' => 'getProvincia',
'ubigeo' => 'getUbigeo',
'urbanizacion' => 'getUrbanizacion'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['codigo_local'] = isset($data['codigo_local']) ? $data['codigo_local'] : null;
        $this->container['codigo_pais'] = isset($data['codigo_pais']) ? $data['codigo_pais'] : null;
        $this->container['departamento'] = isset($data['departamento']) ? $data['departamento'] : null;
        $this->container['direccion'] = isset($data['direccion']) ? $data['direccion'] : null;
        $this->container['distrito'] = isset($data['distrito']) ? $data['distrito'] : null;
        $this->container['provincia'] = isset($data['provincia']) ? $data['provincia'] : null;
        $this->container['ubigeo'] = isset($data['ubigeo']) ? $data['ubigeo'] : null;
        $this->container['urbanizacion'] = isset($data['urbanizacion']) ? $data['urbanizacion'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets codigo_local
     *
     * @return string
     */
    public function getCodigoLocal()
    {
        return $this->container['codigo_local'];
    }

    /**
     * Sets codigo_local
     *
     * @param string $codigo_local codigo_local
     *
     * @return $this
     */
    public function setCodigoLocal($codigo_local)
    {
        $this->container['codigo_local'] = $codigo_local;

        return $this;
    }

    /**
     * Gets codigo_pais
     *
     * @return string
     */
    public function getCodigoPais()
    {
        return $this->container['codigo_pais'];
    }

    /**
     * Sets codigo_pais
     *
     * @param string $codigo_pais codigo_pais
     *
     * @return $this
     */
    public function setCodigoPais($codigo_pais)
    {
        $this->container['codigo_pais'] = $codigo_pais;

        return $this;
    }

    /**
     * Gets departamento
     *
     * @return string
     */
    public function getDepartamento()
    {
        return $this->container['departamento'];
    }

    /**
     * Sets departamento
     *
     * @param string $departamento departamento
     *
     * @return $this
     */
    public function setDepartamento($departamento)
    {
        $this->container['departamento'] = $departamento;

        return $this;
    }

    /**
     * Gets direccion
     *
     * @return string
     */
    public function getDireccion()
    {
        return $this->container['direccion'];
    }

    /**
     * Sets direccion
     *
     * @param string $direccion direccion
     *
     * @return $this
     */
    public function setDireccion($direccion)
    {
        $this->container['direccion'] = $direccion;

        return $this;
    }

    /**
     * Gets distrito
     *
     * @return string
     */
    public function getDistrito()
    {
        return $this->container['distrito'];
    }

    /**
     * Sets distrito
     *
     * @param string $distrito distrito
     *
     * @return $this
     */
    public function setDistrito($distrito)
    {
        $this->container['distrito'] = $distrito;

        return $this;
    }

    /**
     * Gets provincia
     *
     * @return string
     */
    public function getProvincia()
    {
        return $this->container['provincia'];
    }

    /**
     * Sets provincia
     *
     * @param string $provincia provincia
     *
     * @return $this
     */
    public function setProvincia($provincia)
    {
        $this->container['provincia'] = $provincia;

        return $this;
    }

    /**
     * Gets ubigeo
     *
     * @return string
     */
    public function getUbigeo()
    {
        return $this->container['ubigeo'];
    }

    /**
     * Sets ubigeo
     *
     * @param string $ubigeo ubigeo
     *
     * @return $this
     */
    public function setUbigeo($ubigeo)
    {
        $this->container['ubigeo'] = $ubigeo;

        return $this;
    }

    /**
     * Gets urbanizacion
     *
     * @return string
     */
    public function getUrbanizacion()
    {
        return $this->container['urbanizacion'];
    }

    /**
     * Sets urbanizacion
     *
     * @param string $urbanizacion urbanizacion
     *
     * @return $this
     */
    public function setUrbanizacion($urbanizacion)
    {
        $this->container['urbanizacion'] = $urbanizacion;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
