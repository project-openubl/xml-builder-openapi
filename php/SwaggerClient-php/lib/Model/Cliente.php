<?php
/**
 * Cliente
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * XML Builder API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0.Final
 * Contact: projectopenubl+subscribe@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.18
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Cliente Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Cliente implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Cliente';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'contacto' => '\Swagger\Client\Model\Contacto',
'direccion' => '\Swagger\Client\Model\Direccion',
'nombre' => 'string',
'numero_documento_identidad' => 'string',
'tipo_documento_identidad' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'contacto' => null,
'direccion' => null,
'nombre' => null,
'numero_documento_identidad' => null,
'tipo_documento_identidad' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contacto' => 'contacto',
'direccion' => 'direccion',
'nombre' => 'nombre',
'numero_documento_identidad' => 'numeroDocumentoIdentidad',
'tipo_documento_identidad' => 'tipoDocumentoIdentidad'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contacto' => 'setContacto',
'direccion' => 'setDireccion',
'nombre' => 'setNombre',
'numero_documento_identidad' => 'setNumeroDocumentoIdentidad',
'tipo_documento_identidad' => 'setTipoDocumentoIdentidad'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contacto' => 'getContacto',
'direccion' => 'getDireccion',
'nombre' => 'getNombre',
'numero_documento_identidad' => 'getNumeroDocumentoIdentidad',
'tipo_documento_identidad' => 'getTipoDocumentoIdentidad'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TIPO_DOCUMENTO_IDENTIDAD_DOC_TRIB_NO_DOM_SIN_RUC = 'DOC_TRIB_NO_DOM_SIN_RUC';
const TIPO_DOCUMENTO_IDENTIDAD__0 = '0';
const TIPO_DOCUMENTO_IDENTIDAD_DNI = 'DNI';
const TIPO_DOCUMENTO_IDENTIDAD__1 = '1';
const TIPO_DOCUMENTO_IDENTIDAD_EXTRANJERIA = 'EXTRANJERIA';
const TIPO_DOCUMENTO_IDENTIDAD__4 = '4';
const TIPO_DOCUMENTO_IDENTIDAD_RUC = 'RUC';
const TIPO_DOCUMENTO_IDENTIDAD__6 = '6';
const TIPO_DOCUMENTO_IDENTIDAD_PASAPORTE = 'PASAPORTE';
const TIPO_DOCUMENTO_IDENTIDAD__7 = '7';
const TIPO_DOCUMENTO_IDENTIDAD_DEC_DIPLOMATICA = 'DEC_DIPLOMATICA';
const TIPO_DOCUMENTO_IDENTIDAD_A = 'A';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTipoDocumentoIdentidadAllowableValues()
    {
        return [
            self::TIPO_DOCUMENTO_IDENTIDAD_DOC_TRIB_NO_DOM_SIN_RUC,
self::TIPO_DOCUMENTO_IDENTIDAD__0,
self::TIPO_DOCUMENTO_IDENTIDAD_DNI,
self::TIPO_DOCUMENTO_IDENTIDAD__1,
self::TIPO_DOCUMENTO_IDENTIDAD_EXTRANJERIA,
self::TIPO_DOCUMENTO_IDENTIDAD__4,
self::TIPO_DOCUMENTO_IDENTIDAD_RUC,
self::TIPO_DOCUMENTO_IDENTIDAD__6,
self::TIPO_DOCUMENTO_IDENTIDAD_PASAPORTE,
self::TIPO_DOCUMENTO_IDENTIDAD__7,
self::TIPO_DOCUMENTO_IDENTIDAD_DEC_DIPLOMATICA,
self::TIPO_DOCUMENTO_IDENTIDAD_A,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contacto'] = isset($data['contacto']) ? $data['contacto'] : null;
        $this->container['direccion'] = isset($data['direccion']) ? $data['direccion'] : null;
        $this->container['nombre'] = isset($data['nombre']) ? $data['nombre'] : null;
        $this->container['numero_documento_identidad'] = isset($data['numero_documento_identidad']) ? $data['numero_documento_identidad'] : null;
        $this->container['tipo_documento_identidad'] = isset($data['tipo_documento_identidad']) ? $data['tipo_documento_identidad'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['nombre'] === null) {
            $invalidProperties[] = "'nombre' can't be null";
        }
        if ($this->container['numero_documento_identidad'] === null) {
            $invalidProperties[] = "'numero_documento_identidad' can't be null";
        }
        if ($this->container['tipo_documento_identidad'] === null) {
            $invalidProperties[] = "'tipo_documento_identidad' can't be null";
        }
        $allowedValues = $this->getTipoDocumentoIdentidadAllowableValues();
        if (!is_null($this->container['tipo_documento_identidad']) && !in_array($this->container['tipo_documento_identidad'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tipo_documento_identidad', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contacto
     *
     * @return \Swagger\Client\Model\Contacto
     */
    public function getContacto()
    {
        return $this->container['contacto'];
    }

    /**
     * Sets contacto
     *
     * @param \Swagger\Client\Model\Contacto $contacto contacto
     *
     * @return $this
     */
    public function setContacto($contacto)
    {
        $this->container['contacto'] = $contacto;

        return $this;
    }

    /**
     * Gets direccion
     *
     * @return \Swagger\Client\Model\Direccion
     */
    public function getDireccion()
    {
        return $this->container['direccion'];
    }

    /**
     * Sets direccion
     *
     * @param \Swagger\Client\Model\Direccion $direccion direccion
     *
     * @return $this
     */
    public function setDireccion($direccion)
    {
        $this->container['direccion'] = $direccion;

        return $this;
    }

    /**
     * Gets nombre
     *
     * @return string
     */
    public function getNombre()
    {
        return $this->container['nombre'];
    }

    /**
     * Sets nombre
     *
     * @param string $nombre Nombre o RazÃ³n Social del cliente
     *
     * @return $this
     */
    public function setNombre($nombre)
    {
        $this->container['nombre'] = $nombre;

        return $this;
    }

    /**
     * Gets numero_documento_identidad
     *
     * @return string
     */
    public function getNumeroDocumentoIdentidad()
    {
        return $this->container['numero_documento_identidad'];
    }

    /**
     * Sets numero_documento_identidad
     *
     * @param string $numero_documento_identidad numero_documento_identidad
     *
     * @return $this
     */
    public function setNumeroDocumentoIdentidad($numero_documento_identidad)
    {
        $this->container['numero_documento_identidad'] = $numero_documento_identidad;

        return $this;
    }

    /**
     * Gets tipo_documento_identidad
     *
     * @return string
     */
    public function getTipoDocumentoIdentidad()
    {
        return $this->container['tipo_documento_identidad'];
    }

    /**
     * Sets tipo_documento_identidad
     *
     * @param string $tipo_documento_identidad Catalogo 06
     *
     * @return $this
     */
    public function setTipoDocumentoIdentidad($tipo_documento_identidad)
    {
        $allowedValues = $this->getTipoDocumentoIdentidadAllowableValues();
        if (!in_array($tipo_documento_identidad, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tipo_documento_identidad', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tipo_documento_identidad'] = $tipo_documento_identidad;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
